

Microchip MPLAB XC8 Assembler V2.50 build 20240725155939 
                                                                                               Sun Jan 12 10:43:03 2025

Microchip MPLAB XC8 C Compiler v2.50 (Free license) build 20240725155939 Og1 
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,space=0,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,space=0,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,space=0,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,space=0,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,space=0,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,space=0,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,space=0,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,space=0,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,space=0,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,space=0,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,space=0,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,space=0,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,space=0,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,space=0,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,space=0,delta=1
    23                           	psect	intcodelo,global,reloc=2,class=CODE,space=0,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,space=0,delta=1,group=2
    25                           	psect	text15,global,reloc=2,class=CODE,space=0,delta=1,group=2
    26                           	psect	text16,global,reloc=2,class=CODE,space=0,delta=1
    27                           	psect	text17,global,reloc=2,class=CODE,space=0,delta=1
    28                           	psect	text18,global,reloc=2,class=CODE,space=0,delta=1
    29                           	psect	text19,global,reloc=2,class=CODE,space=0,delta=1
    30                           	psect	text20,global,reloc=2,class=CODE,space=0,delta=1
    31                           	psect	intcode,global,reloc=2,class=CODE,space=0,delta=1
    32                           	psect	intcode_body,global,reloc=2,class=CODE,space=0,delta=1
    33                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    34                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    35                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1,lowdata
    36                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    37                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    38   000000                     
    39                           ; Generated 25/07/2024 GMT
    40                           ; 
    41                           ; Copyright Â© 2024, Microchip Technology Inc. and its subsidiaries ("Microchip")
    42                           ; All rights reserved.
    43                           ; 
    44                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    45                           ; 
    46                           ; Redistribution and use in source and binary forms, with or without modification, are
    47                           ; permitted provided that the following conditions are met:
    48                           ; 
    49                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    50                           ;        conditions and the following disclaimer.
    51                           ; 
    52                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    53                           ;        of conditions and the following disclaimer in the documentation and/or other
    54                           ;        materials provided with the distribution. Publication is not required when
    55                           ;        this file is used in an embedded application.
    56                           ; 
    57                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    58                           ;        software without specific prior written permission.
    59                           ; 
    60                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    61                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    62                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    63                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    64                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    65                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    66                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    67                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    68                           ; 
    69                           ; 
    70                           ; Code-generator required, PIC18F4520 Definitions
    71                           ; 
    72                           ; SFR Addresses
    73   000FE0                     bsr             equ	4064
    74   000FE9                     fsr0            equ	4073
    75   000FEA                     fsr0h           equ	4074
    76   000FE9                     fsr0l           equ	4073
    77   000FE1                     fsr1            equ	4065
    78   000FE2                     fsr1h           equ	4066
    79   000FE1                     fsr1l           equ	4065
    80   000FD9                     fsr2            equ	4057
    81   000FDA                     fsr2h           equ	4058
    82   000FD9                     fsr2l           equ	4057
    83   000FEF                     indf0           equ	4079
    84   000FE7                     indf1           equ	4071
    85   000FDF                     indf2           equ	4063
    86   000FF2                     intcon          equ	4082
    87   000000                     nvmcon          equ	0
    88   000FF9                     pcl             equ	4089
    89   000FFA                     pclath          equ	4090
    90   000FFB                     pclatu          equ	4091
    91   000FEB                     plusw0          equ	4075
    92   000FE3                     plusw1          equ	4067
    93   000FDB                     plusw2          equ	4059
    94   000FED                     postdec0        equ	4077
    95   000FE5                     postdec1        equ	4069
    96   000FDD                     postdec2        equ	4061
    97   000FEE                     postinc0        equ	4078
    98   000FE6                     postinc1        equ	4070
    99   000FDE                     postinc2        equ	4062
   100   000FEC                     preinc0         equ	4076
   101   000FE4                     preinc1         equ	4068
   102   000FDC                     preinc2         equ	4060
   103   000FF3                     prod            equ	4083
   104   000FF4                     prodh           equ	4084
   105   000FF3                     prodl           equ	4083
   106   000FD8                     status          equ	4056
   107   000FF5                     tablat          equ	4085
   108   000FF6                     tblptr          equ	4086
   109   000FF7                     tblptrh         equ	4087
   110   000FF6                     tblptrl         equ	4086
   111   000FF8                     tblptru         equ	4088
   112   000FFD                     tosl            equ	4093
   113   000FE8                     wreg            equ	4072
   114   000F80                     PORTA           equ	3968	;# 
   115   000F81                     PORTB           equ	3969	;# 
   116   000F82                     PORTC           equ	3970	;# 
   117   000F83                     PORTD           equ	3971	;# 
   118   000F84                     PORTE           equ	3972	;# 
   119   000F89                     LATA            equ	3977	;# 
   120   000F8A                     LATB            equ	3978	;# 
   121   000F8B                     LATC            equ	3979	;# 
   122   000F8C                     LATD            equ	3980	;# 
   123   000F8D                     LATE            equ	3981	;# 
   124   000F92                     TRISA           equ	3986	;# 
   125   000F92                     DDRA            equ	3986	;# 
   126   000F93                     TRISB           equ	3987	;# 
   127   000F93                     DDRB            equ	3987	;# 
   128   000F94                     TRISC           equ	3988	;# 
   129   000F94                     DDRC            equ	3988	;# 
   130   000F95                     TRISD           equ	3989	;# 
   131   000F95                     DDRD            equ	3989	;# 
   132   000F96                     TRISE           equ	3990	;# 
   133   000F96                     DDRE            equ	3990	;# 
   134   000F9B                     OSCTUNE         equ	3995	;# 
   135   000F9D                     PIE1            equ	3997	;# 
   136   000F9E                     PIR1            equ	3998	;# 
   137   000F9F                     IPR1            equ	3999	;# 
   138   000FA0                     PIE2            equ	4000	;# 
   139   000FA1                     PIR2            equ	4001	;# 
   140   000FA2                     IPR2            equ	4002	;# 
   141   000FA6                     EECON1          equ	4006	;# 
   142   000FA7                     EECON2          equ	4007	;# 
   143   000FA8                     EEDATA          equ	4008	;# 
   144   000FA9                     EEADR           equ	4009	;# 
   145   000FAB                     RCSTA           equ	4011	;# 
   146   000FAB                     RCSTA1          equ	4011	;# 
   147   000FAC                     TXSTA           equ	4012	;# 
   148   000FAC                     TXSTA1          equ	4012	;# 
   149   000FAD                     TXREG           equ	4013	;# 
   150   000FAD                     TXREG1          equ	4013	;# 
   151   000FAE                     RCREG           equ	4014	;# 
   152   000FAE                     RCREG1          equ	4014	;# 
   153   000FAF                     SPBRG           equ	4015	;# 
   154   000FAF                     SPBRG1          equ	4015	;# 
   155   000FB0                     SPBRGH          equ	4016	;# 
   156   000FB1                     T3CON           equ	4017	;# 
   157   000FB2                     TMR3            equ	4018	;# 
   158   000FB2                     TMR3L           equ	4018	;# 
   159   000FB3                     TMR3H           equ	4019	;# 
   160   000FB4                     CMCON           equ	4020	;# 
   161   000FB5                     CVRCON          equ	4021	;# 
   162   000FB6                     ECCP1AS         equ	4022	;# 
   163   000FB6                     ECCPAS          equ	4022	;# 
   164   000FB7                     PWM1CON         equ	4023	;# 
   165   000FB7                     ECCP1DEL        equ	4023	;# 
   166   000FB8                     BAUDCON         equ	4024	;# 
   167   000FB8                     BAUDCTL         equ	4024	;# 
   168   000FBA                     CCP2CON         equ	4026	;# 
   169   000FBB                     CCPR2           equ	4027	;# 
   170   000FBB                     CCPR2L          equ	4027	;# 
   171   000FBC                     CCPR2H          equ	4028	;# 
   172   000FBD                     CCP1CON         equ	4029	;# 
   173   000FBE                     CCPR1           equ	4030	;# 
   174   000FBE                     CCPR1L          equ	4030	;# 
   175   000FBF                     CCPR1H          equ	4031	;# 
   176   000FC0                     ADCON2          equ	4032	;# 
   177   000FC1                     ADCON1          equ	4033	;# 
   178   000FC2                     ADCON0          equ	4034	;# 
   179   000FC3                     ADRES           equ	4035	;# 
   180   000FC3                     ADRESL          equ	4035	;# 
   181   000FC4                     ADRESH          equ	4036	;# 
   182   000FC5                     SSPCON2         equ	4037	;# 
   183   000FC6                     SSPCON1         equ	4038	;# 
   184   000FC7                     SSPSTAT         equ	4039	;# 
   185   000FC8                     SSPADD          equ	4040	;# 
   186   000FC9                     SSPBUF          equ	4041	;# 
   187   000FCA                     T2CON           equ	4042	;# 
   188   000FCB                     PR2             equ	4043	;# 
   189   000FCB                     MEMCON          equ	4043	;# 
   190   000FCC                     TMR2            equ	4044	;# 
   191   000FCD                     T1CON           equ	4045	;# 
   192   000FCE                     TMR1            equ	4046	;# 
   193   000FCE                     TMR1L           equ	4046	;# 
   194   000FCF                     TMR1H           equ	4047	;# 
   195   000FD0                     RCON            equ	4048	;# 
   196   000FD1                     WDTCON          equ	4049	;# 
   197   000FD2                     HLVDCON         equ	4050	;# 
   198   000FD2                     LVDCON          equ	4050	;# 
   199   000FD3                     OSCCON          equ	4051	;# 
   200   000FD5                     T0CON           equ	4053	;# 
   201   000FD6                     TMR0            equ	4054	;# 
   202   000FD6                     TMR0L           equ	4054	;# 
   203   000FD7                     TMR0H           equ	4055	;# 
   204   000FD8                     STATUS          equ	4056	;# 
   205   000FD9                     FSR2            equ	4057	;# 
   206   000FD9                     FSR2L           equ	4057	;# 
   207   000FDA                     FSR2H           equ	4058	;# 
   208   000FDB                     PLUSW2          equ	4059	;# 
   209   000FDC                     PREINC2         equ	4060	;# 
   210   000FDD                     POSTDEC2        equ	4061	;# 
   211   000FDE                     POSTINC2        equ	4062	;# 
   212   000FDF                     INDF2           equ	4063	;# 
   213   000FE0                     BSR             equ	4064	;# 
   214   000FE1                     FSR1            equ	4065	;# 
   215   000FE1                     FSR1L           equ	4065	;# 
   216   000FE2                     FSR1H           equ	4066	;# 
   217   000FE3                     PLUSW1          equ	4067	;# 
   218   000FE4                     PREINC1         equ	4068	;# 
   219   000FE5                     POSTDEC1        equ	4069	;# 
   220   000FE6                     POSTINC1        equ	4070	;# 
   221   000FE7                     INDF1           equ	4071	;# 
   222   000FE8                     WREG            equ	4072	;# 
   223   000FE9                     FSR0            equ	4073	;# 
   224   000FE9                     FSR0L           equ	4073	;# 
   225   000FEA                     FSR0H           equ	4074	;# 
   226   000FEB                     PLUSW0          equ	4075	;# 
   227   000FEC                     PREINC0         equ	4076	;# 
   228   000FED                     POSTDEC0        equ	4077	;# 
   229   000FEE                     POSTINC0        equ	4078	;# 
   230   000FEF                     INDF0           equ	4079	;# 
   231   000FF0                     INTCON3         equ	4080	;# 
   232   000FF1                     INTCON2         equ	4081	;# 
   233   000FF2                     INTCON          equ	4082	;# 
   234   000FF3                     PROD            equ	4083	;# 
   235   000FF3                     PRODL           equ	4083	;# 
   236   000FF4                     PRODH           equ	4084	;# 
   237   000FF5                     TABLAT          equ	4085	;# 
   238   000FF6                     TBLPTR          equ	4086	;# 
   239   000FF6                     TBLPTRL         equ	4086	;# 
   240   000FF7                     TBLPTRH         equ	4087	;# 
   241   000FF8                     TBLPTRU         equ	4088	;# 
   242   000FF9                     PCLAT           equ	4089	;# 
   243   000FF9                     PC              equ	4089	;# 
   244   000FF9                     PCL             equ	4089	;# 
   245   000FFA                     PCLATH          equ	4090	;# 
   246   000FFB                     PCLATU          equ	4091	;# 
   247   000FFC                     STKPTR          equ	4092	;# 
   248   000FFD                     TOS             equ	4093	;# 
   249   000FFD                     TOSL            equ	4093	;# 
   250   000FFE                     TOSH            equ	4094	;# 
   251   000FFF                     TOSU            equ	4095	;# 
   252   000F80                     PORTA           equ	3968	;# 
   253   000F81                     PORTB           equ	3969	;# 
   254   000F82                     PORTC           equ	3970	;# 
   255   000F83                     PORTD           equ	3971	;# 
   256   000F84                     PORTE           equ	3972	;# 
   257   000F89                     LATA            equ	3977	;# 
   258   000F8A                     LATB            equ	3978	;# 
   259   000F8B                     LATC            equ	3979	;# 
   260   000F8C                     LATD            equ	3980	;# 
   261   000F8D                     LATE            equ	3981	;# 
   262   000F92                     TRISA           equ	3986	;# 
   263   000F92                     DDRA            equ	3986	;# 
   264   000F93                     TRISB           equ	3987	;# 
   265   000F93                     DDRB            equ	3987	;# 
   266   000F94                     TRISC           equ	3988	;# 
   267   000F94                     DDRC            equ	3988	;# 
   268   000F95                     TRISD           equ	3989	;# 
   269   000F95                     DDRD            equ	3989	;# 
   270   000F96                     TRISE           equ	3990	;# 
   271   000F96                     DDRE            equ	3990	;# 
   272   000F9B                     OSCTUNE         equ	3995	;# 
   273   000F9D                     PIE1            equ	3997	;# 
   274   000F9E                     PIR1            equ	3998	;# 
   275   000F9F                     IPR1            equ	3999	;# 
   276   000FA0                     PIE2            equ	4000	;# 
   277   000FA1                     PIR2            equ	4001	;# 
   278   000FA2                     IPR2            equ	4002	;# 
   279   000FA6                     EECON1          equ	4006	;# 
   280   000FA7                     EECON2          equ	4007	;# 
   281   000FA8                     EEDATA          equ	4008	;# 
   282   000FA9                     EEADR           equ	4009	;# 
   283   000FAB                     RCSTA           equ	4011	;# 
   284   000FAB                     RCSTA1          equ	4011	;# 
   285   000FAC                     TXSTA           equ	4012	;# 
   286   000FAC                     TXSTA1          equ	4012	;# 
   287   000FAD                     TXREG           equ	4013	;# 
   288   000FAD                     TXREG1          equ	4013	;# 
   289   000FAE                     RCREG           equ	4014	;# 
   290   000FAE                     RCREG1          equ	4014	;# 
   291   000FAF                     SPBRG           equ	4015	;# 
   292   000FAF                     SPBRG1          equ	4015	;# 
   293   000FB0                     SPBRGH          equ	4016	;# 
   294   000FB1                     T3CON           equ	4017	;# 
   295   000FB2                     TMR3            equ	4018	;# 
   296   000FB2                     TMR3L           equ	4018	;# 
   297   000FB3                     TMR3H           equ	4019	;# 
   298   000FB4                     CMCON           equ	4020	;# 
   299   000FB5                     CVRCON          equ	4021	;# 
   300   000FB6                     ECCP1AS         equ	4022	;# 
   301   000FB6                     ECCPAS          equ	4022	;# 
   302   000FB7                     PWM1CON         equ	4023	;# 
   303   000FB7                     ECCP1DEL        equ	4023	;# 
   304   000FB8                     BAUDCON         equ	4024	;# 
   305   000FB8                     BAUDCTL         equ	4024	;# 
   306   000FBA                     CCP2CON         equ	4026	;# 
   307   000FBB                     CCPR2           equ	4027	;# 
   308   000FBB                     CCPR2L          equ	4027	;# 
   309   000FBC                     CCPR2H          equ	4028	;# 
   310   000FBD                     CCP1CON         equ	4029	;# 
   311   000FBE                     CCPR1           equ	4030	;# 
   312   000FBE                     CCPR1L          equ	4030	;# 
   313   000FBF                     CCPR1H          equ	4031	;# 
   314   000FC0                     ADCON2          equ	4032	;# 
   315   000FC1                     ADCON1          equ	4033	;# 
   316   000FC2                     ADCON0          equ	4034	;# 
   317   000FC3                     ADRES           equ	4035	;# 
   318   000FC3                     ADRESL          equ	4035	;# 
   319   000FC4                     ADRESH          equ	4036	;# 
   320   000FC5                     SSPCON2         equ	4037	;# 
   321   000FC6                     SSPCON1         equ	4038	;# 
   322   000FC7                     SSPSTAT         equ	4039	;# 
   323   000FC8                     SSPADD          equ	4040	;# 
   324   000FC9                     SSPBUF          equ	4041	;# 
   325   000FCA                     T2CON           equ	4042	;# 
   326   000FCB                     PR2             equ	4043	;# 
   327   000FCB                     MEMCON          equ	4043	;# 
   328   000FCC                     TMR2            equ	4044	;# 
   329   000FCD                     T1CON           equ	4045	;# 
   330   000FCE                     TMR1            equ	4046	;# 
   331   000FCE                     TMR1L           equ	4046	;# 
   332   000FCF                     TMR1H           equ	4047	;# 
   333   000FD0                     RCON            equ	4048	;# 
   334   000FD1                     WDTCON          equ	4049	;# 
   335   000FD2                     HLVDCON         equ	4050	;# 
   336   000FD2                     LVDCON          equ	4050	;# 
   337   000FD3                     OSCCON          equ	4051	;# 
   338   000FD5                     T0CON           equ	4053	;# 
   339   000FD6                     TMR0            equ	4054	;# 
   340   000FD6                     TMR0L           equ	4054	;# 
   341   000FD7                     TMR0H           equ	4055	;# 
   342   000FD8                     STATUS          equ	4056	;# 
   343   000FD9                     FSR2            equ	4057	;# 
   344   000FD9                     FSR2L           equ	4057	;# 
   345   000FDA                     FSR2H           equ	4058	;# 
   346   000FDB                     PLUSW2          equ	4059	;# 
   347   000FDC                     PREINC2         equ	4060	;# 
   348   000FDD                     POSTDEC2        equ	4061	;# 
   349   000FDE                     POSTINC2        equ	4062	;# 
   350   000FDF                     INDF2           equ	4063	;# 
   351   000FE0                     BSR             equ	4064	;# 
   352   000FE1                     FSR1            equ	4065	;# 
   353   000FE1                     FSR1L           equ	4065	;# 
   354   000FE2                     FSR1H           equ	4066	;# 
   355   000FE3                     PLUSW1          equ	4067	;# 
   356   000FE4                     PREINC1         equ	4068	;# 
   357   000FE5                     POSTDEC1        equ	4069	;# 
   358   000FE6                     POSTINC1        equ	4070	;# 
   359   000FE7                     INDF1           equ	4071	;# 
   360   000FE8                     WREG            equ	4072	;# 
   361   000FE9                     FSR0            equ	4073	;# 
   362   000FE9                     FSR0L           equ	4073	;# 
   363   000FEA                     FSR0H           equ	4074	;# 
   364   000FEB                     PLUSW0          equ	4075	;# 
   365   000FEC                     PREINC0         equ	4076	;# 
   366   000FED                     POSTDEC0        equ	4077	;# 
   367   000FEE                     POSTINC0        equ	4078	;# 
   368   000FEF                     INDF0           equ	4079	;# 
   369   000FF0                     INTCON3         equ	4080	;# 
   370   000FF1                     INTCON2         equ	4081	;# 
   371   000FF2                     INTCON          equ	4082	;# 
   372   000FF3                     PROD            equ	4083	;# 
   373   000FF3                     PRODL           equ	4083	;# 
   374   000FF4                     PRODH           equ	4084	;# 
   375   000FF5                     TABLAT          equ	4085	;# 
   376   000FF6                     TBLPTR          equ	4086	;# 
   377   000FF6                     TBLPTRL         equ	4086	;# 
   378   000FF7                     TBLPTRH         equ	4087	;# 
   379   000FF8                     TBLPTRU         equ	4088	;# 
   380   000FF9                     PCLAT           equ	4089	;# 
   381   000FF9                     PC              equ	4089	;# 
   382   000FF9                     PCL             equ	4089	;# 
   383   000FFA                     PCLATH          equ	4090	;# 
   384   000FFB                     PCLATU          equ	4091	;# 
   385   000FFC                     STKPTR          equ	4092	;# 
   386   000FFD                     TOS             equ	4093	;# 
   387   000FFD                     TOSL            equ	4093	;# 
   388   000FFE                     TOSH            equ	4094	;# 
   389   000FFF                     TOSU            equ	4095	;# 
   390   000F80                     PORTA           equ	3968	;# 
   391   000F81                     PORTB           equ	3969	;# 
   392   000F82                     PORTC           equ	3970	;# 
   393   000F83                     PORTD           equ	3971	;# 
   394   000F84                     PORTE           equ	3972	;# 
   395   000F89                     LATA            equ	3977	;# 
   396   000F8A                     LATB            equ	3978	;# 
   397   000F8B                     LATC            equ	3979	;# 
   398   000F8C                     LATD            equ	3980	;# 
   399   000F8D                     LATE            equ	3981	;# 
   400   000F92                     TRISA           equ	3986	;# 
   401   000F92                     DDRA            equ	3986	;# 
   402   000F93                     TRISB           equ	3987	;# 
   403   000F93                     DDRB            equ	3987	;# 
   404   000F94                     TRISC           equ	3988	;# 
   405   000F94                     DDRC            equ	3988	;# 
   406   000F95                     TRISD           equ	3989	;# 
   407   000F95                     DDRD            equ	3989	;# 
   408   000F96                     TRISE           equ	3990	;# 
   409   000F96                     DDRE            equ	3990	;# 
   410   000F9B                     OSCTUNE         equ	3995	;# 
   411   000F9D                     PIE1            equ	3997	;# 
   412   000F9E                     PIR1            equ	3998	;# 
   413   000F9F                     IPR1            equ	3999	;# 
   414   000FA0                     PIE2            equ	4000	;# 
   415   000FA1                     PIR2            equ	4001	;# 
   416   000FA2                     IPR2            equ	4002	;# 
   417   000FA6                     EECON1          equ	4006	;# 
   418   000FA7                     EECON2          equ	4007	;# 
   419   000FA8                     EEDATA          equ	4008	;# 
   420   000FA9                     EEADR           equ	4009	;# 
   421   000FAB                     RCSTA           equ	4011	;# 
   422   000FAB                     RCSTA1          equ	4011	;# 
   423   000FAC                     TXSTA           equ	4012	;# 
   424   000FAC                     TXSTA1          equ	4012	;# 
   425   000FAD                     TXREG           equ	4013	;# 
   426   000FAD                     TXREG1          equ	4013	;# 
   427   000FAE                     RCREG           equ	4014	;# 
   428   000FAE                     RCREG1          equ	4014	;# 
   429   000FAF                     SPBRG           equ	4015	;# 
   430   000FAF                     SPBRG1          equ	4015	;# 
   431   000FB0                     SPBRGH          equ	4016	;# 
   432   000FB1                     T3CON           equ	4017	;# 
   433   000FB2                     TMR3            equ	4018	;# 
   434   000FB2                     TMR3L           equ	4018	;# 
   435   000FB3                     TMR3H           equ	4019	;# 
   436   000FB4                     CMCON           equ	4020	;# 
   437   000FB5                     CVRCON          equ	4021	;# 
   438   000FB6                     ECCP1AS         equ	4022	;# 
   439   000FB6                     ECCPAS          equ	4022	;# 
   440   000FB7                     PWM1CON         equ	4023	;# 
   441   000FB7                     ECCP1DEL        equ	4023	;# 
   442   000FB8                     BAUDCON         equ	4024	;# 
   443   000FB8                     BAUDCTL         equ	4024	;# 
   444   000FBA                     CCP2CON         equ	4026	;# 
   445   000FBB                     CCPR2           equ	4027	;# 
   446   000FBB                     CCPR2L          equ	4027	;# 
   447   000FBC                     CCPR2H          equ	4028	;# 
   448   000FBD                     CCP1CON         equ	4029	;# 
   449   000FBE                     CCPR1           equ	4030	;# 
   450   000FBE                     CCPR1L          equ	4030	;# 
   451   000FBF                     CCPR1H          equ	4031	;# 
   452   000FC0                     ADCON2          equ	4032	;# 
   453   000FC1                     ADCON1          equ	4033	;# 
   454   000FC2                     ADCON0          equ	4034	;# 
   455   000FC3                     ADRES           equ	4035	;# 
   456   000FC3                     ADRESL          equ	4035	;# 
   457   000FC4                     ADRESH          equ	4036	;# 
   458   000FC5                     SSPCON2         equ	4037	;# 
   459   000FC6                     SSPCON1         equ	4038	;# 
   460   000FC7                     SSPSTAT         equ	4039	;# 
   461   000FC8                     SSPADD          equ	4040	;# 
   462   000FC9                     SSPBUF          equ	4041	;# 
   463   000FCA                     T2CON           equ	4042	;# 
   464   000FCB                     PR2             equ	4043	;# 
   465   000FCB                     MEMCON          equ	4043	;# 
   466   000FCC                     TMR2            equ	4044	;# 
   467   000FCD                     T1CON           equ	4045	;# 
   468   000FCE                     TMR1            equ	4046	;# 
   469   000FCE                     TMR1L           equ	4046	;# 
   470   000FCF                     TMR1H           equ	4047	;# 
   471   000FD0                     RCON            equ	4048	;# 
   472   000FD1                     WDTCON          equ	4049	;# 
   473   000FD2                     HLVDCON         equ	4050	;# 
   474   000FD2                     LVDCON          equ	4050	;# 
   475   000FD3                     OSCCON          equ	4051	;# 
   476   000FD5                     T0CON           equ	4053	;# 
   477   000FD6                     TMR0            equ	4054	;# 
   478   000FD6                     TMR0L           equ	4054	;# 
   479   000FD7                     TMR0H           equ	4055	;# 
   480   000FD8                     STATUS          equ	4056	;# 
   481   000FD9                     FSR2            equ	4057	;# 
   482   000FD9                     FSR2L           equ	4057	;# 
   483   000FDA                     FSR2H           equ	4058	;# 
   484   000FDB                     PLUSW2          equ	4059	;# 
   485   000FDC                     PREINC2         equ	4060	;# 
   486   000FDD                     POSTDEC2        equ	4061	;# 
   487   000FDE                     POSTINC2        equ	4062	;# 
   488   000FDF                     INDF2           equ	4063	;# 
   489   000FE0                     BSR             equ	4064	;# 
   490   000FE1                     FSR1            equ	4065	;# 
   491   000FE1                     FSR1L           equ	4065	;# 
   492   000FE2                     FSR1H           equ	4066	;# 
   493   000FE3                     PLUSW1          equ	4067	;# 
   494   000FE4                     PREINC1         equ	4068	;# 
   495   000FE5                     POSTDEC1        equ	4069	;# 
   496   000FE6                     POSTINC1        equ	4070	;# 
   497   000FE7                     INDF1           equ	4071	;# 
   498   000FE8                     WREG            equ	4072	;# 
   499   000FE9                     FSR0            equ	4073	;# 
   500   000FE9                     FSR0L           equ	4073	;# 
   501   000FEA                     FSR0H           equ	4074	;# 
   502   000FEB                     PLUSW0          equ	4075	;# 
   503   000FEC                     PREINC0         equ	4076	;# 
   504   000FED                     POSTDEC0        equ	4077	;# 
   505   000FEE                     POSTINC0        equ	4078	;# 
   506   000FEF                     INDF0           equ	4079	;# 
   507   000FF0                     INTCON3         equ	4080	;# 
   508   000FF1                     INTCON2         equ	4081	;# 
   509   000FF2                     INTCON          equ	4082	;# 
   510   000FF3                     PROD            equ	4083	;# 
   511   000FF3                     PRODL           equ	4083	;# 
   512   000FF4                     PRODH           equ	4084	;# 
   513   000FF5                     TABLAT          equ	4085	;# 
   514   000FF6                     TBLPTR          equ	4086	;# 
   515   000FF6                     TBLPTRL         equ	4086	;# 
   516   000FF7                     TBLPTRH         equ	4087	;# 
   517   000FF8                     TBLPTRU         equ	4088	;# 
   518   000FF9                     PCLAT           equ	4089	;# 
   519   000FF9                     PC              equ	4089	;# 
   520   000FF9                     PCL             equ	4089	;# 
   521   000FFA                     PCLATH          equ	4090	;# 
   522   000FFB                     PCLATU          equ	4091	;# 
   523   000FFC                     STKPTR          equ	4092	;# 
   524   000FFD                     TOS             equ	4093	;# 
   525   000FFD                     TOSL            equ	4093	;# 
   526   000FFE                     TOSH            equ	4094	;# 
   527   000FFF                     TOSU            equ	4095	;# 
   528   000F80                     PORTA           equ	3968	;# 
   529   000F81                     PORTB           equ	3969	;# 
   530   000F82                     PORTC           equ	3970	;# 
   531   000F83                     PORTD           equ	3971	;# 
   532   000F84                     PORTE           equ	3972	;# 
   533   000F89                     LATA            equ	3977	;# 
   534   000F8A                     LATB            equ	3978	;# 
   535   000F8B                     LATC            equ	3979	;# 
   536   000F8C                     LATD            equ	3980	;# 
   537   000F8D                     LATE            equ	3981	;# 
   538   000F92                     TRISA           equ	3986	;# 
   539   000F92                     DDRA            equ	3986	;# 
   540   000F93                     TRISB           equ	3987	;# 
   541   000F93                     DDRB            equ	3987	;# 
   542   000F94                     TRISC           equ	3988	;# 
   543   000F94                     DDRC            equ	3988	;# 
   544   000F95                     TRISD           equ	3989	;# 
   545   000F95                     DDRD            equ	3989	;# 
   546   000F96                     TRISE           equ	3990	;# 
   547   000F96                     DDRE            equ	3990	;# 
   548   000F9B                     OSCTUNE         equ	3995	;# 
   549   000F9D                     PIE1            equ	3997	;# 
   550   000F9E                     PIR1            equ	3998	;# 
   551   000F9F                     IPR1            equ	3999	;# 
   552   000FA0                     PIE2            equ	4000	;# 
   553   000FA1                     PIR2            equ	4001	;# 
   554   000FA2                     IPR2            equ	4002	;# 
   555   000FA6                     EECON1          equ	4006	;# 
   556   000FA7                     EECON2          equ	4007	;# 
   557   000FA8                     EEDATA          equ	4008	;# 
   558   000FA9                     EEADR           equ	4009	;# 
   559   000FAB                     RCSTA           equ	4011	;# 
   560   000FAB                     RCSTA1          equ	4011	;# 
   561   000FAC                     TXSTA           equ	4012	;# 
   562   000FAC                     TXSTA1          equ	4012	;# 
   563   000FAD                     TXREG           equ	4013	;# 
   564   000FAD                     TXREG1          equ	4013	;# 
   565   000FAE                     RCREG           equ	4014	;# 
   566   000FAE                     RCREG1          equ	4014	;# 
   567   000FAF                     SPBRG           equ	4015	;# 
   568   000FAF                     SPBRG1          equ	4015	;# 
   569   000FB0                     SPBRGH          equ	4016	;# 
   570   000FB1                     T3CON           equ	4017	;# 
   571   000FB2                     TMR3            equ	4018	;# 
   572   000FB2                     TMR3L           equ	4018	;# 
   573   000FB3                     TMR3H           equ	4019	;# 
   574   000FB4                     CMCON           equ	4020	;# 
   575   000FB5                     CVRCON          equ	4021	;# 
   576   000FB6                     ECCP1AS         equ	4022	;# 
   577   000FB6                     ECCPAS          equ	4022	;# 
   578   000FB7                     PWM1CON         equ	4023	;# 
   579   000FB7                     ECCP1DEL        equ	4023	;# 
   580   000FB8                     BAUDCON         equ	4024	;# 
   581   000FB8                     BAUDCTL         equ	4024	;# 
   582   000FBA                     CCP2CON         equ	4026	;# 
   583   000FBB                     CCPR2           equ	4027	;# 
   584   000FBB                     CCPR2L          equ	4027	;# 
   585   000FBC                     CCPR2H          equ	4028	;# 
   586   000FBD                     CCP1CON         equ	4029	;# 
   587   000FBE                     CCPR1           equ	4030	;# 
   588   000FBE                     CCPR1L          equ	4030	;# 
   589   000FBF                     CCPR1H          equ	4031	;# 
   590   000FC0                     ADCON2          equ	4032	;# 
   591   000FC1                     ADCON1          equ	4033	;# 
   592   000FC2                     ADCON0          equ	4034	;# 
   593   000FC3                     ADRES           equ	4035	;# 
   594   000FC3                     ADRESL          equ	4035	;# 
   595   000FC4                     ADRESH          equ	4036	;# 
   596   000FC5                     SSPCON2         equ	4037	;# 
   597   000FC6                     SSPCON1         equ	4038	;# 
   598   000FC7                     SSPSTAT         equ	4039	;# 
   599   000FC8                     SSPADD          equ	4040	;# 
   600   000FC9                     SSPBUF          equ	4041	;# 
   601   000FCA                     T2CON           equ	4042	;# 
   602   000FCB                     PR2             equ	4043	;# 
   603   000FCB                     MEMCON          equ	4043	;# 
   604   000FCC                     TMR2            equ	4044	;# 
   605   000FCD                     T1CON           equ	4045	;# 
   606   000FCE                     TMR1            equ	4046	;# 
   607   000FCE                     TMR1L           equ	4046	;# 
   608   000FCF                     TMR1H           equ	4047	;# 
   609   000FD0                     RCON            equ	4048	;# 
   610   000FD1                     WDTCON          equ	4049	;# 
   611   000FD2                     HLVDCON         equ	4050	;# 
   612   000FD2                     LVDCON          equ	4050	;# 
   613   000FD3                     OSCCON          equ	4051	;# 
   614   000FD5                     T0CON           equ	4053	;# 
   615   000FD6                     TMR0            equ	4054	;# 
   616   000FD6                     TMR0L           equ	4054	;# 
   617   000FD7                     TMR0H           equ	4055	;# 
   618   000FD8                     STATUS          equ	4056	;# 
   619   000FD9                     FSR2            equ	4057	;# 
   620   000FD9                     FSR2L           equ	4057	;# 
   621   000FDA                     FSR2H           equ	4058	;# 
   622   000FDB                     PLUSW2          equ	4059	;# 
   623   000FDC                     PREINC2         equ	4060	;# 
   624   000FDD                     POSTDEC2        equ	4061	;# 
   625   000FDE                     POSTINC2        equ	4062	;# 
   626   000FDF                     INDF2           equ	4063	;# 
   627   000FE0                     BSR             equ	4064	;# 
   628   000FE1                     FSR1            equ	4065	;# 
   629   000FE1                     FSR1L           equ	4065	;# 
   630   000FE2                     FSR1H           equ	4066	;# 
   631   000FE3                     PLUSW1          equ	4067	;# 
   632   000FE4                     PREINC1         equ	4068	;# 
   633   000FE5                     POSTDEC1        equ	4069	;# 
   634   000FE6                     POSTINC1        equ	4070	;# 
   635   000FE7                     INDF1           equ	4071	;# 
   636   000FE8                     WREG            equ	4072	;# 
   637   000FE9                     FSR0            equ	4073	;# 
   638   000FE9                     FSR0L           equ	4073	;# 
   639   000FEA                     FSR0H           equ	4074	;# 
   640   000FEB                     PLUSW0          equ	4075	;# 
   641   000FEC                     PREINC0         equ	4076	;# 
   642   000FED                     POSTDEC0        equ	4077	;# 
   643   000FEE                     POSTINC0        equ	4078	;# 
   644   000FEF                     INDF0           equ	4079	;# 
   645   000FF0                     INTCON3         equ	4080	;# 
   646   000FF1                     INTCON2         equ	4081	;# 
   647   000FF2                     INTCON          equ	4082	;# 
   648   000FF3                     PROD            equ	4083	;# 
   649   000FF3                     PRODL           equ	4083	;# 
   650   000FF4                     PRODH           equ	4084	;# 
   651   000FF5                     TABLAT          equ	4085	;# 
   652   000FF6                     TBLPTR          equ	4086	;# 
   653   000FF6                     TBLPTRL         equ	4086	;# 
   654   000FF7                     TBLPTRH         equ	4087	;# 
   655   000FF8                     TBLPTRU         equ	4088	;# 
   656   000FF9                     PCLAT           equ	4089	;# 
   657   000FF9                     PC              equ	4089	;# 
   658   000FF9                     PCL             equ	4089	;# 
   659   000FFA                     PCLATH          equ	4090	;# 
   660   000FFB                     PCLATU          equ	4091	;# 
   661   000FFC                     STKPTR          equ	4092	;# 
   662   000FFD                     TOS             equ	4093	;# 
   663   000FFD                     TOSL            equ	4093	;# 
   664   000FFE                     TOSH            equ	4094	;# 
   665   000FFF                     TOSU            equ	4095	;# 
   666   000F80                     PORTA           equ	3968	;# 
   667   000F81                     PORTB           equ	3969	;# 
   668   000F82                     PORTC           equ	3970	;# 
   669   000F83                     PORTD           equ	3971	;# 
   670   000F84                     PORTE           equ	3972	;# 
   671   000F89                     LATA            equ	3977	;# 
   672   000F8A                     LATB            equ	3978	;# 
   673   000F8B                     LATC            equ	3979	;# 
   674   000F8C                     LATD            equ	3980	;# 
   675   000F8D                     LATE            equ	3981	;# 
   676   000F92                     TRISA           equ	3986	;# 
   677   000F92                     DDRA            equ	3986	;# 
   678   000F93                     TRISB           equ	3987	;# 
   679   000F93                     DDRB            equ	3987	;# 
   680   000F94                     TRISC           equ	3988	;# 
   681   000F94                     DDRC            equ	3988	;# 
   682   000F95                     TRISD           equ	3989	;# 
   683   000F95                     DDRD            equ	3989	;# 
   684   000F96                     TRISE           equ	3990	;# 
   685   000F96                     DDRE            equ	3990	;# 
   686   000F9B                     OSCTUNE         equ	3995	;# 
   687   000F9D                     PIE1            equ	3997	;# 
   688   000F9E                     PIR1            equ	3998	;# 
   689   000F9F                     IPR1            equ	3999	;# 
   690   000FA0                     PIE2            equ	4000	;# 
   691   000FA1                     PIR2            equ	4001	;# 
   692   000FA2                     IPR2            equ	4002	;# 
   693   000FA6                     EECON1          equ	4006	;# 
   694   000FA7                     EECON2          equ	4007	;# 
   695   000FA8                     EEDATA          equ	4008	;# 
   696   000FA9                     EEADR           equ	4009	;# 
   697   000FAB                     RCSTA           equ	4011	;# 
   698   000FAB                     RCSTA1          equ	4011	;# 
   699   000FAC                     TXSTA           equ	4012	;# 
   700   000FAC                     TXSTA1          equ	4012	;# 
   701   000FAD                     TXREG           equ	4013	;# 
   702   000FAD                     TXREG1          equ	4013	;# 
   703   000FAE                     RCREG           equ	4014	;# 
   704   000FAE                     RCREG1          equ	4014	;# 
   705   000FAF                     SPBRG           equ	4015	;# 
   706   000FAF                     SPBRG1          equ	4015	;# 
   707   000FB0                     SPBRGH          equ	4016	;# 
   708   000FB1                     T3CON           equ	4017	;# 
   709   000FB2                     TMR3            equ	4018	;# 
   710   000FB2                     TMR3L           equ	4018	;# 
   711   000FB3                     TMR3H           equ	4019	;# 
   712   000FB4                     CMCON           equ	4020	;# 
   713   000FB5                     CVRCON          equ	4021	;# 
   714   000FB6                     ECCP1AS         equ	4022	;# 
   715   000FB6                     ECCPAS          equ	4022	;# 
   716   000FB7                     PWM1CON         equ	4023	;# 
   717   000FB7                     ECCP1DEL        equ	4023	;# 
   718   000FB8                     BAUDCON         equ	4024	;# 
   719   000FB8                     BAUDCTL         equ	4024	;# 
   720   000FBA                     CCP2CON         equ	4026	;# 
   721   000FBB                     CCPR2           equ	4027	;# 
   722   000FBB                     CCPR2L          equ	4027	;# 
   723   000FBC                     CCPR2H          equ	4028	;# 
   724   000FBD                     CCP1CON         equ	4029	;# 
   725   000FBE                     CCPR1           equ	4030	;# 
   726   000FBE                     CCPR1L          equ	4030	;# 
   727   000FBF                     CCPR1H          equ	4031	;# 
   728   000FC0                     ADCON2          equ	4032	;# 
   729   000FC1                     ADCON1          equ	4033	;# 
   730   000FC2                     ADCON0          equ	4034	;# 
   731   000FC3                     ADRES           equ	4035	;# 
   732   000FC3                     ADRESL          equ	4035	;# 
   733   000FC4                     ADRESH          equ	4036	;# 
   734   000FC5                     SSPCON2         equ	4037	;# 
   735   000FC6                     SSPCON1         equ	4038	;# 
   736   000FC7                     SSPSTAT         equ	4039	;# 
   737   000FC8                     SSPADD          equ	4040	;# 
   738   000FC9                     SSPBUF          equ	4041	;# 
   739   000FCA                     T2CON           equ	4042	;# 
   740   000FCB                     PR2             equ	4043	;# 
   741   000FCB                     MEMCON          equ	4043	;# 
   742   000FCC                     TMR2            equ	4044	;# 
   743   000FCD                     T1CON           equ	4045	;# 
   744   000FCE                     TMR1            equ	4046	;# 
   745   000FCE                     TMR1L           equ	4046	;# 
   746   000FCF                     TMR1H           equ	4047	;# 
   747   000FD0                     RCON            equ	4048	;# 
   748   000FD1                     WDTCON          equ	4049	;# 
   749   000FD2                     HLVDCON         equ	4050	;# 
   750   000FD2                     LVDCON          equ	4050	;# 
   751   000FD3                     OSCCON          equ	4051	;# 
   752   000FD5                     T0CON           equ	4053	;# 
   753   000FD6                     TMR0            equ	4054	;# 
   754   000FD6                     TMR0L           equ	4054	;# 
   755   000FD7                     TMR0H           equ	4055	;# 
   756   000FD8                     STATUS          equ	4056	;# 
   757   000FD9                     FSR2            equ	4057	;# 
   758   000FD9                     FSR2L           equ	4057	;# 
   759   000FDA                     FSR2H           equ	4058	;# 
   760   000FDB                     PLUSW2          equ	4059	;# 
   761   000FDC                     PREINC2         equ	4060	;# 
   762   000FDD                     POSTDEC2        equ	4061	;# 
   763   000FDE                     POSTINC2        equ	4062	;# 
   764   000FDF                     INDF2           equ	4063	;# 
   765   000FE0                     BSR             equ	4064	;# 
   766   000FE1                     FSR1            equ	4065	;# 
   767   000FE1                     FSR1L           equ	4065	;# 
   768   000FE2                     FSR1H           equ	4066	;# 
   769   000FE3                     PLUSW1          equ	4067	;# 
   770   000FE4                     PREINC1         equ	4068	;# 
   771   000FE5                     POSTDEC1        equ	4069	;# 
   772   000FE6                     POSTINC1        equ	4070	;# 
   773   000FE7                     INDF1           equ	4071	;# 
   774   000FE8                     WREG            equ	4072	;# 
   775   000FE9                     FSR0            equ	4073	;# 
   776   000FE9                     FSR0L           equ	4073	;# 
   777   000FEA                     FSR0H           equ	4074	;# 
   778   000FEB                     PLUSW0          equ	4075	;# 
   779   000FEC                     PREINC0         equ	4076	;# 
   780   000FED                     POSTDEC0        equ	4077	;# 
   781   000FEE                     POSTINC0        equ	4078	;# 
   782   000FEF                     INDF0           equ	4079	;# 
   783   000FF0                     INTCON3         equ	4080	;# 
   784   000FF1                     INTCON2         equ	4081	;# 
   785   000FF2                     INTCON          equ	4082	;# 
   786   000FF3                     PROD            equ	4083	;# 
   787   000FF3                     PRODL           equ	4083	;# 
   788   000FF4                     PRODH           equ	4084	;# 
   789   000FF5                     TABLAT          equ	4085	;# 
   790   000FF6                     TBLPTR          equ	4086	;# 
   791   000FF6                     TBLPTRL         equ	4086	;# 
   792   000FF7                     TBLPTRH         equ	4087	;# 
   793   000FF8                     TBLPTRU         equ	4088	;# 
   794   000FF9                     PCLAT           equ	4089	;# 
   795   000FF9                     PC              equ	4089	;# 
   796   000FF9                     PCL             equ	4089	;# 
   797   000FFA                     PCLATH          equ	4090	;# 
   798   000FFB                     PCLATU          equ	4091	;# 
   799   000FFC                     STKPTR          equ	4092	;# 
   800   000FFD                     TOS             equ	4093	;# 
   801   000FFD                     TOSL            equ	4093	;# 
   802   000FFE                     TOSH            equ	4094	;# 
   803   000FFF                     TOSU            equ	4095	;# 
   804   000F80                     PORTA           equ	3968	;# 
   805   000F81                     PORTB           equ	3969	;# 
   806   000F82                     PORTC           equ	3970	;# 
   807   000F83                     PORTD           equ	3971	;# 
   808   000F84                     PORTE           equ	3972	;# 
   809   000F89                     LATA            equ	3977	;# 
   810   000F8A                     LATB            equ	3978	;# 
   811   000F8B                     LATC            equ	3979	;# 
   812   000F8C                     LATD            equ	3980	;# 
   813   000F8D                     LATE            equ	3981	;# 
   814   000F92                     TRISA           equ	3986	;# 
   815   000F92                     DDRA            equ	3986	;# 
   816   000F93                     TRISB           equ	3987	;# 
   817   000F93                     DDRB            equ	3987	;# 
   818   000F94                     TRISC           equ	3988	;# 
   819   000F94                     DDRC            equ	3988	;# 
   820   000F95                     TRISD           equ	3989	;# 
   821   000F95                     DDRD            equ	3989	;# 
   822   000F96                     TRISE           equ	3990	;# 
   823   000F96                     DDRE            equ	3990	;# 
   824   000F9B                     OSCTUNE         equ	3995	;# 
   825   000F9D                     PIE1            equ	3997	;# 
   826   000F9E                     PIR1            equ	3998	;# 
   827   000F9F                     IPR1            equ	3999	;# 
   828   000FA0                     PIE2            equ	4000	;# 
   829   000FA1                     PIR2            equ	4001	;# 
   830   000FA2                     IPR2            equ	4002	;# 
   831   000FA6                     EECON1          equ	4006	;# 
   832   000FA7                     EECON2          equ	4007	;# 
   833   000FA8                     EEDATA          equ	4008	;# 
   834   000FA9                     EEADR           equ	4009	;# 
   835   000FAB                     RCSTA           equ	4011	;# 
   836   000FAB                     RCSTA1          equ	4011	;# 
   837   000FAC                     TXSTA           equ	4012	;# 
   838   000FAC                     TXSTA1          equ	4012	;# 
   839   000FAD                     TXREG           equ	4013	;# 
   840   000FAD                     TXREG1          equ	4013	;# 
   841   000FAE                     RCREG           equ	4014	;# 
   842   000FAE                     RCREG1          equ	4014	;# 
   843   000FAF                     SPBRG           equ	4015	;# 
   844   000FAF                     SPBRG1          equ	4015	;# 
   845   000FB0                     SPBRGH          equ	4016	;# 
   846   000FB1                     T3CON           equ	4017	;# 
   847   000FB2                     TMR3            equ	4018	;# 
   848   000FB2                     TMR3L           equ	4018	;# 
   849   000FB3                     TMR3H           equ	4019	;# 
   850   000FB4                     CMCON           equ	4020	;# 
   851   000FB5                     CVRCON          equ	4021	;# 
   852   000FB6                     ECCP1AS         equ	4022	;# 
   853   000FB6                     ECCPAS          equ	4022	;# 
   854   000FB7                     PWM1CON         equ	4023	;# 
   855   000FB7                     ECCP1DEL        equ	4023	;# 
   856   000FB8                     BAUDCON         equ	4024	;# 
   857   000FB8                     BAUDCTL         equ	4024	;# 
   858   000FBA                     CCP2CON         equ	4026	;# 
   859   000FBB                     CCPR2           equ	4027	;# 
   860   000FBB                     CCPR2L          equ	4027	;# 
   861   000FBC                     CCPR2H          equ	4028	;# 
   862   000FBD                     CCP1CON         equ	4029	;# 
   863   000FBE                     CCPR1           equ	4030	;# 
   864   000FBE                     CCPR1L          equ	4030	;# 
   865   000FBF                     CCPR1H          equ	4031	;# 
   866   000FC0                     ADCON2          equ	4032	;# 
   867   000FC1                     ADCON1          equ	4033	;# 
   868   000FC2                     ADCON0          equ	4034	;# 
   869   000FC3                     ADRES           equ	4035	;# 
   870   000FC3                     ADRESL          equ	4035	;# 
   871   000FC4                     ADRESH          equ	4036	;# 
   872   000FC5                     SSPCON2         equ	4037	;# 
   873   000FC6                     SSPCON1         equ	4038	;# 
   874   000FC7                     SSPSTAT         equ	4039	;# 
   875   000FC8                     SSPADD          equ	4040	;# 
   876   000FC9                     SSPBUF          equ	4041	;# 
   877   000FCA                     T2CON           equ	4042	;# 
   878   000FCB                     PR2             equ	4043	;# 
   879   000FCB                     MEMCON          equ	4043	;# 
   880   000FCC                     TMR2            equ	4044	;# 
   881   000FCD                     T1CON           equ	4045	;# 
   882   000FCE                     TMR1            equ	4046	;# 
   883   000FCE                     TMR1L           equ	4046	;# 
   884   000FCF                     TMR1H           equ	4047	;# 
   885   000FD0                     RCON            equ	4048	;# 
   886   000FD1                     WDTCON          equ	4049	;# 
   887   000FD2                     HLVDCON         equ	4050	;# 
   888   000FD2                     LVDCON          equ	4050	;# 
   889   000FD3                     OSCCON          equ	4051	;# 
   890   000FD5                     T0CON           equ	4053	;# 
   891   000FD6                     TMR0            equ	4054	;# 
   892   000FD6                     TMR0L           equ	4054	;# 
   893   000FD7                     TMR0H           equ	4055	;# 
   894   000FD8                     STATUS          equ	4056	;# 
   895   000FD9                     FSR2            equ	4057	;# 
   896   000FD9                     FSR2L           equ	4057	;# 
   897   000FDA                     FSR2H           equ	4058	;# 
   898   000FDB                     PLUSW2          equ	4059	;# 
   899   000FDC                     PREINC2         equ	4060	;# 
   900   000FDD                     POSTDEC2        equ	4061	;# 
   901   000FDE                     POSTINC2        equ	4062	;# 
   902   000FDF                     INDF2           equ	4063	;# 
   903   000FE0                     BSR             equ	4064	;# 
   904   000FE1                     FSR1            equ	4065	;# 
   905   000FE1                     FSR1L           equ	4065	;# 
   906   000FE2                     FSR1H           equ	4066	;# 
   907   000FE3                     PLUSW1          equ	4067	;# 
   908   000FE4                     PREINC1         equ	4068	;# 
   909   000FE5                     POSTDEC1        equ	4069	;# 
   910   000FE6                     POSTINC1        equ	4070	;# 
   911   000FE7                     INDF1           equ	4071	;# 
   912   000FE8                     WREG            equ	4072	;# 
   913   000FE9                     FSR0            equ	4073	;# 
   914   000FE9                     FSR0L           equ	4073	;# 
   915   000FEA                     FSR0H           equ	4074	;# 
   916   000FEB                     PLUSW0          equ	4075	;# 
   917   000FEC                     PREINC0         equ	4076	;# 
   918   000FED                     POSTDEC0        equ	4077	;# 
   919   000FEE                     POSTINC0        equ	4078	;# 
   920   000FEF                     INDF0           equ	4079	;# 
   921   000FF0                     INTCON3         equ	4080	;# 
   922   000FF1                     INTCON2         equ	4081	;# 
   923   000FF2                     INTCON          equ	4082	;# 
   924   000FF3                     PROD            equ	4083	;# 
   925   000FF3                     PRODL           equ	4083	;# 
   926   000FF4                     PRODH           equ	4084	;# 
   927   000FF5                     TABLAT          equ	4085	;# 
   928   000FF6                     TBLPTR          equ	4086	;# 
   929   000FF6                     TBLPTRL         equ	4086	;# 
   930   000FF7                     TBLPTRH         equ	4087	;# 
   931   000FF8                     TBLPTRU         equ	4088	;# 
   932   000FF9                     PCLAT           equ	4089	;# 
   933   000FF9                     PC              equ	4089	;# 
   934   000FF9                     PCL             equ	4089	;# 
   935   000FFA                     PCLATH          equ	4090	;# 
   936   000FFB                     PCLATU          equ	4091	;# 
   937   000FFC                     STKPTR          equ	4092	;# 
   938   000FFD                     TOS             equ	4093	;# 
   939   000FFD                     TOSL            equ	4093	;# 
   940   000FFE                     TOSH            equ	4094	;# 
   941   000FFF                     TOSU            equ	4095	;# 
   942   007D5C                     _CREN           set	32092
   943   007CF5                     _RCIF           set	31989
   944   007E9C                     _IRCF0          set	32412
   945   007E9D                     _IRCF1          set	32413
   946   007E9E                     _IRCF2          set	32414
   947   007E07                     _ADFM           set	32263
   948   000F92                     _TRISAbits      set	3986
   949   000F89                     _LATA           set	3977
   950   000F89                     _LATAbits       set	3977
   951   000FAE                     _RCREG          set	4014
   952   000FAD                     _TXREG          set	4013
   953   000F9D                     _PIE1bits       set	3997
   954   000FAB                     _RCSTAbits      set	4011
   955   000FAF                     _SPBRG          set	4015
   956   000FB8                     _BAUDCONbits    set	4024
   957   000FAC                     _TXSTAbits      set	4012
   958   000FF2                     _INTCONbits     set	4082
   959   000FD0                     _RCONbits       set	4048
   960   000F9F                     _IPR1bits       set	3999
   961   000F9E                     _PIR1bits       set	3998
   962   000FBD                     _CCP1CON        set	4029
   963   000F94                     _TRISCbits      set	3988
   964   000FC2                     _ADCON0bits     set	4034
   965   000FC3                     _ADRESL         set	4035
   966   000FC4                     _ADRESH         set	4036
   967   000FC0                     _ADCON2bits     set	4032
   968   000FC1                     _ADCON1         set	4033
   969   000F92                     _TRISA          set	3986
   970                           
   971                           	psect	smallconst
   972   000600                     __psmallconst:
   973                           	callstack 0
   974   000600  00                 	db	0
   975   000601                     STR_1:
   976   000601  0D                 	db	13
   977   000602  0A                 	db	10
   978   000603  00                 	db	0
   979   000603                     STR_2           equ	STR_1+2
   980   000603                     STR_3           equ	STR_1+2
   981   000603                     STR_4           equ	STR_1+2
   982   000603                     STR_5           equ	STR_1+2
   983   000603                     STR_6           equ	STR_1+2
   984   000603                     STR_7           equ	STR_1+2
   985   000604  00                 	db	0	; dummy byte at the end
   986   000002                     __activetblptr  equ	2
   987                           
   988                           ; #config settings
   989                           
   990                           	psect	cinit
   991   0008DC                     __pcinit:
   992                           	callstack 0
   993   0008DC                     start_initialization:
   994                           	callstack 0
   995   0008DC                     __initialization:
   996                           	callstack 0
   997                           
   998                           ; Clear objects allocated to COMRAM (44 bytes)
   999   0008DC  EE00  F001         	lfsr	0,__pbssCOMRAM
  1000   0008E0  0E2C               	movlw	44
  1001   0008E2                     clear_0:
  1002   0008E2  6AEE               	clrf	postinc0,c
  1003   0008E4  06E8               	decf	wreg,f,c
  1004   0008E6  E1FD               	bnz	clear_0
  1005   0008E8                     end_of_initialization:
  1006                           	callstack 0
  1007   0008E8                     __end_of__initialization:
  1008                           	callstack 0
  1009   0008E8  9057               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1010   0008EA  9257               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1011   0008EC  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1012   0008EE  6EF8               	movwf	tblptru,c
  1013   0008F0  0100               	movlb	0
  1014   0008F2  EF03  F003         	goto	_main	;jump to C main() function
  1015                           
  1016                           	psect	bssCOMRAM
  1017   000001                     __pbssCOMRAM:
  1018                           	callstack 0
  1019   000001                     _str:
  1020                           	callstack 0
  1021   000001                     	ds	20
  1022   000015                     _state:
  1023                           	callstack 0
  1024   000015                     	ds	2
  1025   000017                     _lenStr:
  1026                           	callstack 0
  1027   000017                     	ds	2
  1028   000019                     _mystring:
  1029                           	callstack 0
  1030   000019                     	ds	20
  1031                           
  1032                           	psect	cstackBANK0
  1033   000080                     __pcstackBANK0:
  1034                           	callstack 0
  1035   000080                     ??_displayBinary:
  1036                           
  1037                           ; 1 bytes @ 0x0
  1038   000080                     	ds	1
  1039   000081                     ledRightOn@num:
  1040                           	callstack 0
  1041   000081                     ledRightOff@num:
  1042                           	callstack 0
  1043   000081                     ledLeftOn@num:
  1044                           	callstack 0
  1045   000081                     ledLeftOff@num:
  1046                           	callstack 0
  1047   000081                     BreakOn@num:
  1048                           	callstack 0
  1049   000081                     BreakOff@num:
  1050                           	callstack 0
  1051                           
  1052                           ; 2 bytes @ 0x1
  1053   000081                     	ds	2
  1054   000083                     ??_main:
  1055                           
  1056                           ; 1 bytes @ 0x3
  1057   000083                     	ds	2
  1058                           
  1059                           	psect	cstackCOMRAM
  1060   00002D                     __pcstackCOMRAM:
  1061                           	callstack 0
  1062   00002D                     ?_strlen:
  1063                           	callstack 0
  1064   00002D                     UART_Write@data:
  1065                           	callstack 0
  1066   00002D                     strlen@s:
  1067                           	callstack 0
  1068   00002D                     ClearBuffer@i:
  1069                           	callstack 0
  1070   00002D                     
  1071                           ; 1 bytes @ 0x0
  1072   00002D                     	ds	1
  1073   00002E                     UART_Write_Text@text:
  1074                           	callstack 0
  1075                           
  1076                           ; 1 bytes @ 0x1
  1077   00002E                     	ds	1
  1078   00002F                     strcpy@dest:
  1079                           	callstack 0
  1080   00002F                     strlen@a:
  1081                           	callstack 0
  1082   00002F                     ??_UART_Write_Text:
  1083                           
  1084                           ; 1 bytes @ 0x2
  1085   00002F                     	ds	1
  1086   000030                     UART_Write_Text@i:
  1087                           	callstack 0
  1088   000030                     strcpy@src:
  1089                           	callstack 0
  1090                           
  1091                           ; 2 bytes @ 0x3
  1092   000030                     	ds	2
  1093   000032                     MyusartRead@receivedData:
  1094                           	callstack 0
  1095   000032                     ??_strcpy:
  1096   000032                     
  1097                           ; 1 bytes @ 0x5
  1098   000032                     	ds	2
  1099   000034                     strcpy@d:
  1100                           	callstack 0
  1101                           
  1102                           ; 1 bytes @ 0x7
  1103   000034                     	ds	1
  1104   000035                     ??_Lo_ISR:
  1105                           
  1106                           ; 1 bytes @ 0x8
  1107   000035                     	ds	12
  1108   000041                     Lo_ISR@command:
  1109                           	callstack 0
  1110                           
  1111                           ; 20 bytes @ 0x14
  1112   000041                     	ds	20
  1113   000055                     displayBinary@num:
  1114                           	callstack 0
  1115   000055                     
  1116                           ; 1 bytes @ 0x28
  1117   000055                     	ds	2
  1118   000057                     
  1119                           ; 1 bytes @ 0x2A
  1120 ;;
  1121 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1122 ;;
  1123 ;; *************** function _main *****************
  1124 ;; Defined at:
  1125 ;;		line 48 in file "main.c"
  1126 ;; Parameters:    Size  Location     Type
  1127 ;;		None
  1128 ;; Auto vars:     Size  Location     Type
  1129 ;;		None
  1130 ;; Return value:  Size  Location     Type
  1131 ;;                  1    wreg      void 
  1132 ;; Registers used:
  1133 ;;		wreg, status,2, status,0, cstack
  1134 ;; Tracked objects:
  1135 ;;		On entry : 0/0
  1136 ;;		On exit  : 0/0
  1137 ;;		Unchanged: 0/0
  1138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1139 ;;      Params:         0       0       0       0       0       0       0
  1140 ;;      Locals:         0       0       0       0       0       0       0
  1141 ;;      Temps:          0       2       0       0       0       0       0
  1142 ;;      Totals:         0       2       0       0       0       0       0
  1143 ;;Total ram usage:        2 bytes
  1144 ;; Hardware stack levels required when called: 7
  1145 ;; This function calls:
  1146 ;;		_BreakOff
  1147 ;;		_BreakOn
  1148 ;;		_SYSTEM_Initialize
  1149 ;;		_initialState
  1150 ;;		_ledLeftOff
  1151 ;;		_ledLeftOn
  1152 ;;		_ledRightOff
  1153 ;;		_ledRightOn
  1154 ;; This function is called by:
  1155 ;;		Startup code after reset
  1156 ;; This function uses a non-reentrant model
  1157 ;;
  1158                           
  1159                           	psect	text0
  1160   000606                     __ptext0:
  1161                           	callstack 0
  1162   000606                     _main:
  1163                           	callstack 24
  1164   000606                     
  1165                           ;main.c: 51:     ADCON1 = 0x0f;
  1166   000606  0E0F               	movlw	15
  1167   000608  6EC1               	movwf	193,c	;volatile
  1168   00060A                     
  1169                           ;main.c: 52:     LATA = 0x00;
  1170   00060A  6A89               	clrf	137,c	;volatile
  1171   00060C                     
  1172                           ;main.c: 53:     TRISAbits.TRISA1 = 0;
  1173   00060C  9292               	bcf	146,1,c	;volatile
  1174   00060E                     
  1175                           ;main.c: 54:     TRISAbits.TRISA2 = 0;
  1176   00060E  9492               	bcf	146,2,c	;volatile
  1177   000610                     
  1178                           ;main.c: 55:     TRISAbits.TRISA3 = 0;
  1179   000610  9692               	bcf	146,3,c	;volatile
  1180   000612                     
  1181                           ;main.c: 56:     TRISAbits.TRISA4 = 0;
  1182   000612  9892               	bcf	146,4,c	;volatile
  1183   000614                     
  1184                           ;main.c: 57:     LATAbits.LATA1 = 0;
  1185   000614  9289               	bcf	137,1,c	;volatile
  1186   000616                     
  1187                           ;main.c: 58:     LATAbits.LATA2 = 0;
  1188   000616  9489               	bcf	137,2,c	;volatile
  1189   000618                     
  1190                           ;main.c: 59:     LATAbits.LATA3 = 0;
  1191   000618  9689               	bcf	137,3,c	;volatile
  1192   00061A                     
  1193                           ;main.c: 60:     LATAbits.LATA4 = 0;
  1194   00061A  9889               	bcf	137,4,c	;volatile
  1195   00061C                     
  1196                           ;main.c: 63:     INTCONbits.GIE = 1;
  1197   00061C  8EF2               	bsf	242,7,c	;volatile
  1198   00061E                     
  1199                           ;main.c: 64:     INTCONbits.PEIE = 1;
  1200   00061E  8CF2               	bsf	242,6,c	;volatile
  1201   000620                     
  1202                           ;main.c: 65:     INTCONbits.INT0IE = 1;
  1203   000620  88F2               	bsf	242,4,c	;volatile
  1204   000622                     
  1205                           ;main.c: 66:     INTCONbits.INT0IF = 0;
  1206   000622  92F2               	bcf	242,1,c	;volatile
  1207   000624                     
  1208                           ;main.c: 68:     SYSTEM_Initialize() ;
  1209   000624  ECA9  F004         	call	_SYSTEM_Initialize	;wreg free
  1210   000628  EF4A  F003         	goto	l1504
  1211   00062C                     l1488:
  1212                           
  1213                           ; BSR set to: 0
  1214                           ;main.c: 73:                 initialState();
  1215   00062C  ECA2  F004         	call	_initialState	;wreg free
  1216                           
  1217                           ;main.c: 74:                 break;
  1218   000630  EF4A  F003         	goto	l1504
  1219   000634                     l1490:
  1220                           
  1221                           ; BSR set to: 0
  1222                           ;main.c: 76:                 ledRightOn(1);
  1223   000634  0E00               	movlw	0
  1224   000636  6F82               	movwf	(ledRightOn@num+1)& (0+255),b
  1225   000638  0E01               	movlw	1
  1226   00063A  6F81               	movwf	ledRightOn@num& (0+255),b
  1227   00063C  EC86  F004         	call	_ledRightOn	;wreg free
  1228                           
  1229                           ;main.c: 77:                 break;
  1230   000640  EF4A  F003         	goto	l1504
  1231   000644                     l1492:
  1232                           
  1233                           ; BSR set to: 0
  1234                           ;main.c: 79:                 ledRightOff(2);
  1235   000644  0E00               	movlw	0
  1236   000646  6F82               	movwf	(ledRightOff@num+1)& (0+255),b
  1237   000648  0E02               	movlw	2
  1238   00064A  6F81               	movwf	ledRightOff@num& (0+255),b
  1239   00064C  EC8D  F004         	call	_ledRightOff	;wreg free
  1240                           
  1241                           ;main.c: 80:                 break;
  1242   000650  EF4A  F003         	goto	l1504
  1243   000654                     l1494:
  1244                           
  1245                           ; BSR set to: 0
  1246                           ;main.c: 82:                 ledLeftOn(3);
  1247   000654  0E00               	movlw	0
  1248   000656  6F82               	movwf	(ledLeftOn@num+1)& (0+255),b
  1249   000658  0E03               	movlw	3
  1250   00065A  6F81               	movwf	ledLeftOn@num& (0+255),b
  1251   00065C  EC94  F004         	call	_ledLeftOn	;wreg free
  1252                           
  1253                           ;main.c: 83:                 break;
  1254   000660  EF4A  F003         	goto	l1504
  1255   000664                     l1496:
  1256                           
  1257                           ; BSR set to: 0
  1258                           ;main.c: 85:                 ledLeftOff(4);
  1259   000664  0E00               	movlw	0
  1260   000666  6F82               	movwf	(ledLeftOff@num+1)& (0+255),b
  1261   000668  0E04               	movlw	4
  1262   00066A  6F81               	movwf	ledLeftOff@num& (0+255),b
  1263   00066C  EC9B  F004         	call	_ledLeftOff	;wreg free
  1264                           
  1265                           ;main.c: 86:                 break;
  1266   000670  EF4A  F003         	goto	l1504
  1267   000674                     l1498:
  1268                           
  1269                           ; BSR set to: 0
  1270                           ;main.c: 88:                 BreakOn(5);
  1271   000674  0E00               	movlw	0
  1272   000676  6F82               	movwf	(BreakOn@num+1)& (0+255),b
  1273   000678  0E05               	movlw	5
  1274   00067A  6F81               	movwf	BreakOn@num& (0+255),b
  1275   00067C  ECB0  F004         	call	_BreakOn	;wreg free
  1276                           
  1277                           ;main.c: 89:                 break;
  1278   000680  EF4A  F003         	goto	l1504
  1279   000684                     l1500:
  1280                           
  1281                           ; BSR set to: 0
  1282                           ;main.c: 91:                 BreakOff(6);
  1283   000684  0E00               	movlw	0
  1284   000686  6F82               	movwf	(BreakOff@num+1)& (0+255),b
  1285   000688  0E06               	movlw	6
  1286   00068A  6F81               	movwf	BreakOff@num& (0+255),b
  1287   00068C  ECB7  F004         	call	_BreakOff	;wreg free
  1288                           
  1289                           ;main.c: 92:                 break;
  1290   000690  EF4A  F003         	goto	l1504
  1291   000694                     l176:
  1292   000694                     l1504:
  1293   000694  C015  F083         	movff	_state,??_main
  1294   000698  C016  F084         	movff	_state+1,??_main+1
  1295                           
  1296                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1297                           ; Switch size 1, requested type "simple"
  1298                           ; Number of cases is 1, Range of values is 0 to 0
  1299                           ; switch strategies available:
  1300                           ; Name         Instructions Cycles
  1301                           ; simple_byte            4     3 (average)
  1302                           ;	Chosen strategy is simple_byte
  1303   00069C  0100               	movlb	0	; () banked
  1304   00069E  5184               	movf	(??_main+1)& (0+255),w,b
  1305   0006A0  0A00               	xorlw	0	; case 0
  1306   0006A2  B4D8               	btfsc	status,2,c
  1307   0006A4  EF56  F003         	goto	l1542
  1308   0006A8  EF4A  F003         	goto	l176
  1309   0006AC                     l1542:
  1310                           
  1311                           ; BSR set to: 0
  1312                           ; Switch size 1, requested type "simple"
  1313                           ; Number of cases is 7, Range of values is 0 to 6
  1314                           ; switch strategies available:
  1315                           ; Name         Instructions Cycles
  1316                           ; simple_byte           22    12 (average)
  1317                           ;	Chosen strategy is simple_byte
  1318   0006AC  5183               	movf	??_main& (0+255),w,b
  1319   0006AE  0A00               	xorlw	0	; case 0
  1320   0006B0  B4D8               	btfsc	status,2,c
  1321   0006B2  EF16  F003         	goto	l1488
  1322   0006B6  0A01               	xorlw	1	; case 1
  1323   0006B8  B4D8               	btfsc	status,2,c
  1324   0006BA  EF1A  F003         	goto	l1490
  1325   0006BE  0A03               	xorlw	3	; case 2
  1326   0006C0  B4D8               	btfsc	status,2,c
  1327   0006C2  EF22  F003         	goto	l1492
  1328   0006C6  0A01               	xorlw	1	; case 3
  1329   0006C8  B4D8               	btfsc	status,2,c
  1330   0006CA  EF2A  F003         	goto	l1494
  1331   0006CE  0A07               	xorlw	7	; case 4
  1332   0006D0  B4D8               	btfsc	status,2,c
  1333   0006D2  EF32  F003         	goto	l1496
  1334   0006D6  0A01               	xorlw	1	; case 5
  1335   0006D8  B4D8               	btfsc	status,2,c
  1336   0006DA  EF3A  F003         	goto	l1498
  1337   0006DE  0A03               	xorlw	3	; case 6
  1338   0006E0  B4D8               	btfsc	status,2,c
  1339   0006E2  EF42  F003         	goto	l1500
  1340   0006E6  EF4A  F003         	goto	l176
  1341   0006EA  EFBC  F001         	goto	start
  1342   0006EE                     __end_of_main:
  1343                           	callstack 0
  1344                           
  1345 ;; *************** function _ledRightOn *****************
  1346 ;; Defined at:
  1347 ;;		line 24 in file "main.c"
  1348 ;; Parameters:    Size  Location     Type
  1349 ;;  num             2    1[BANK0 ] int 
  1350 ;; Auto vars:     Size  Location     Type
  1351 ;;		None
  1352 ;; Return value:  Size  Location     Type
  1353 ;;                  1    wreg      void 
  1354 ;; Registers used:
  1355 ;;		wreg, status,2, status,0, cstack
  1356 ;; Tracked objects:
  1357 ;;		On entry : 0/0
  1358 ;;		On exit  : 0/0
  1359 ;;		Unchanged: 0/0
  1360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1361 ;;      Params:         0       2       0       0       0       0       0
  1362 ;;      Locals:         0       0       0       0       0       0       0
  1363 ;;      Temps:          0       0       0       0       0       0       0
  1364 ;;      Totals:         0       2       0       0       0       0       0
  1365 ;;Total ram usage:        2 bytes
  1366 ;; Hardware stack levels used: 1
  1367 ;; Hardware stack levels required when called: 6
  1368 ;; This function calls:
  1369 ;;		_displayBinary
  1370 ;; This function is called by:
  1371 ;;		_main
  1372 ;; This function uses a non-reentrant model
  1373 ;;
  1374                           
  1375                           	psect	text1
  1376   00090C                     __ptext1:
  1377                           	callstack 0
  1378   00090C                     _ledRightOn:
  1379                           	callstack 24
  1380   00090C                     
  1381                           ;main.c: 25:     displayBinary(num);
  1382   00090C  C081  F055         	movff	ledRightOn@num,displayBinary@num
  1383   000910  C082  F056         	movff	ledRightOn@num+1,displayBinary@num+1
  1384   000914  EC77  F003         	call	_displayBinary	;wreg free
  1385   000918  0012               	return		;funcret
  1386   00091A                     __end_of_ledRightOn:
  1387                           	callstack 0
  1388                           
  1389 ;; *************** function _ledRightOff *****************
  1390 ;; Defined at:
  1391 ;;		line 28 in file "main.c"
  1392 ;; Parameters:    Size  Location     Type
  1393 ;;  num             2    1[BANK0 ] int 
  1394 ;; Auto vars:     Size  Location     Type
  1395 ;;		None
  1396 ;; Return value:  Size  Location     Type
  1397 ;;                  1    wreg      void 
  1398 ;; Registers used:
  1399 ;;		wreg, status,2, status,0, cstack
  1400 ;; Tracked objects:
  1401 ;;		On entry : 0/0
  1402 ;;		On exit  : 0/0
  1403 ;;		Unchanged: 0/0
  1404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1405 ;;      Params:         0       2       0       0       0       0       0
  1406 ;;      Locals:         0       0       0       0       0       0       0
  1407 ;;      Temps:          0       0       0       0       0       0       0
  1408 ;;      Totals:         0       2       0       0       0       0       0
  1409 ;;Total ram usage:        2 bytes
  1410 ;; Hardware stack levels used: 1
  1411 ;; Hardware stack levels required when called: 6
  1412 ;; This function calls:
  1413 ;;		_displayBinary
  1414 ;; This function is called by:
  1415 ;;		_main
  1416 ;; This function uses a non-reentrant model
  1417 ;;
  1418                           
  1419                           	psect	text2
  1420   00091A                     __ptext2:
  1421                           	callstack 0
  1422   00091A                     _ledRightOff:
  1423                           	callstack 24
  1424   00091A                     
  1425                           ;main.c: 29:     displayBinary(num);
  1426   00091A  C081  F055         	movff	ledRightOff@num,displayBinary@num
  1427   00091E  C082  F056         	movff	ledRightOff@num+1,displayBinary@num+1
  1428   000922  EC77  F003         	call	_displayBinary	;wreg free
  1429   000926  0012               	return		;funcret
  1430   000928                     __end_of_ledRightOff:
  1431                           	callstack 0
  1432                           
  1433 ;; *************** function _ledLeftOn *****************
  1434 ;; Defined at:
  1435 ;;		line 32 in file "main.c"
  1436 ;; Parameters:    Size  Location     Type
  1437 ;;  num             2    1[BANK0 ] int 
  1438 ;; Auto vars:     Size  Location     Type
  1439 ;;		None
  1440 ;; Return value:  Size  Location     Type
  1441 ;;                  1    wreg      void 
  1442 ;; Registers used:
  1443 ;;		wreg, status,2, status,0, cstack
  1444 ;; Tracked objects:
  1445 ;;		On entry : 0/0
  1446 ;;		On exit  : 0/0
  1447 ;;		Unchanged: 0/0
  1448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1449 ;;      Params:         0       2       0       0       0       0       0
  1450 ;;      Locals:         0       0       0       0       0       0       0
  1451 ;;      Temps:          0       0       0       0       0       0       0
  1452 ;;      Totals:         0       2       0       0       0       0       0
  1453 ;;Total ram usage:        2 bytes
  1454 ;; Hardware stack levels used: 1
  1455 ;; Hardware stack levels required when called: 6
  1456 ;; This function calls:
  1457 ;;		_displayBinary
  1458 ;; This function is called by:
  1459 ;;		_main
  1460 ;; This function uses a non-reentrant model
  1461 ;;
  1462                           
  1463                           	psect	text3
  1464   000928                     __ptext3:
  1465                           	callstack 0
  1466   000928                     _ledLeftOn:
  1467                           	callstack 24
  1468   000928                     
  1469                           ;main.c: 33:     displayBinary(num);
  1470   000928  C081  F055         	movff	ledLeftOn@num,displayBinary@num
  1471   00092C  C082  F056         	movff	ledLeftOn@num+1,displayBinary@num+1
  1472   000930  EC77  F003         	call	_displayBinary	;wreg free
  1473   000934  0012               	return		;funcret
  1474   000936                     __end_of_ledLeftOn:
  1475                           	callstack 0
  1476                           
  1477 ;; *************** function _ledLeftOff *****************
  1478 ;; Defined at:
  1479 ;;		line 36 in file "main.c"
  1480 ;; Parameters:    Size  Location     Type
  1481 ;;  num             2    1[BANK0 ] int 
  1482 ;; Auto vars:     Size  Location     Type
  1483 ;;		None
  1484 ;; Return value:  Size  Location     Type
  1485 ;;                  1    wreg      void 
  1486 ;; Registers used:
  1487 ;;		wreg, status,2, status,0, cstack
  1488 ;; Tracked objects:
  1489 ;;		On entry : 0/0
  1490 ;;		On exit  : 0/0
  1491 ;;		Unchanged: 0/0
  1492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1493 ;;      Params:         0       2       0       0       0       0       0
  1494 ;;      Locals:         0       0       0       0       0       0       0
  1495 ;;      Temps:          0       0       0       0       0       0       0
  1496 ;;      Totals:         0       2       0       0       0       0       0
  1497 ;;Total ram usage:        2 bytes
  1498 ;; Hardware stack levels used: 1
  1499 ;; Hardware stack levels required when called: 6
  1500 ;; This function calls:
  1501 ;;		_displayBinary
  1502 ;; This function is called by:
  1503 ;;		_main
  1504 ;; This function uses a non-reentrant model
  1505 ;;
  1506                           
  1507                           	psect	text4
  1508   000936                     __ptext4:
  1509                           	callstack 0
  1510   000936                     _ledLeftOff:
  1511                           	callstack 24
  1512   000936                     
  1513                           ;main.c: 37:     displayBinary(num);
  1514   000936  C081  F055         	movff	ledLeftOff@num,displayBinary@num
  1515   00093A  C082  F056         	movff	ledLeftOff@num+1,displayBinary@num+1
  1516   00093E  EC77  F003         	call	_displayBinary	;wreg free
  1517   000942  0012               	return		;funcret
  1518   000944                     __end_of_ledLeftOff:
  1519                           	callstack 0
  1520                           
  1521 ;; *************** function _initialState *****************
  1522 ;; Defined at:
  1523 ;;		line 20 in file "main.c"
  1524 ;; Parameters:    Size  Location     Type
  1525 ;;		None
  1526 ;; Auto vars:     Size  Location     Type
  1527 ;;		None
  1528 ;; Return value:  Size  Location     Type
  1529 ;;                  1    wreg      void 
  1530 ;; Registers used:
  1531 ;;		wreg, status,2, status,0, cstack
  1532 ;; Tracked objects:
  1533 ;;		On entry : 0/0
  1534 ;;		On exit  : 0/0
  1535 ;;		Unchanged: 0/0
  1536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1537 ;;      Params:         0       0       0       0       0       0       0
  1538 ;;      Locals:         0       0       0       0       0       0       0
  1539 ;;      Temps:          0       0       0       0       0       0       0
  1540 ;;      Totals:         0       0       0       0       0       0       0
  1541 ;;Total ram usage:        0 bytes
  1542 ;; Hardware stack levels used: 1
  1543 ;; Hardware stack levels required when called: 6
  1544 ;; This function calls:
  1545 ;;		_displayBinary
  1546 ;; This function is called by:
  1547 ;;		_main
  1548 ;; This function uses a non-reentrant model
  1549 ;;
  1550                           
  1551                           	psect	text5
  1552   000944                     __ptext5:
  1553                           	callstack 0
  1554   000944                     _initialState:
  1555                           	callstack 24
  1556   000944                     
  1557                           ;main.c: 21:     displayBinary(0);
  1558   000944  0E00               	movlw	0
  1559   000946  6E56               	movwf	(displayBinary@num+1)^0,c
  1560   000948  0E00               	movlw	0
  1561   00094A  6E55               	movwf	displayBinary@num^0,c
  1562   00094C  EC77  F003         	call	_displayBinary	;wreg free
  1563   000950  0012               	return		;funcret
  1564   000952                     __end_of_initialState:
  1565                           	callstack 0
  1566                           
  1567 ;; *************** function _SYSTEM_Initialize *****************
  1568 ;; Defined at:
  1569 ;;		line 60 in file "setting_hardaware/setting.c"
  1570 ;; Parameters:    Size  Location     Type
  1571 ;;		None
  1572 ;; Auto vars:     Size  Location     Type
  1573 ;;		None
  1574 ;; Return value:  Size  Location     Type
  1575 ;;                  1    wreg      void 
  1576 ;; Registers used:
  1577 ;;		wreg, status,2, cstack
  1578 ;; Tracked objects:
  1579 ;;		On entry : 0/0
  1580 ;;		On exit  : 0/0
  1581 ;;		Unchanged: 0/0
  1582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1583 ;;      Params:         0       0       0       0       0       0       0
  1584 ;;      Locals:         0       0       0       0       0       0       0
  1585 ;;      Temps:          0       0       0       0       0       0       0
  1586 ;;      Totals:         0       0       0       0       0       0       0
  1587 ;;Total ram usage:        0 bytes
  1588 ;; Hardware stack levels used: 1
  1589 ;; Hardware stack levels required when called: 6
  1590 ;; This function calls:
  1591 ;;		_INTERRUPT_Initialize
  1592 ;;		_OSCILLATOR_Initialize
  1593 ;;		_UART_Initialize
  1594 ;; This function is called by:
  1595 ;;		_main
  1596 ;; This function uses a non-reentrant model
  1597 ;;
  1598                           
  1599                           	psect	text6
  1600   000952                     __ptext6:
  1601                           	callstack 0
  1602   000952                     _SYSTEM_Initialize:
  1603                           	callstack 24
  1604   000952                     
  1605                           ;setting_hardaware/setting.c: 63:     OSCILLATOR_Initialize();
  1606   000952  ECBE  F004         	call	_OSCILLATOR_Initialize	;wreg free
  1607                           
  1608                           ;setting_hardaware/setting.c: 67:     INTERRUPT_Initialize();
  1609   000956  ECC2  F004         	call	_INTERRUPT_Initialize	;wreg free
  1610   00095A                     
  1611                           ;setting_hardaware/setting.c: 68:     UART_Initialize();
  1612   00095A  EC5D  F004         	call	_UART_Initialize	;wreg free
  1613   00095E  0012               	return		;funcret
  1614   000960                     __end_of_SYSTEM_Initialize:
  1615                           	callstack 0
  1616                           
  1617 ;; *************** function _UART_Initialize *****************
  1618 ;; Defined at:
  1619 ;;		line 10 in file "setting_hardaware/uart.c"
  1620 ;; Parameters:    Size  Location     Type
  1621 ;;		None
  1622 ;; Auto vars:     Size  Location     Type
  1623 ;;		None
  1624 ;; Return value:  Size  Location     Type
  1625 ;;                  1    wreg      void 
  1626 ;; Registers used:
  1627 ;;		wreg, status,2
  1628 ;; Tracked objects:
  1629 ;;		On entry : 0/0
  1630 ;;		On exit  : 0/0
  1631 ;;		Unchanged: 0/0
  1632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1633 ;;      Params:         0       0       0       0       0       0       0
  1634 ;;      Locals:         0       0       0       0       0       0       0
  1635 ;;      Temps:          0       0       0       0       0       0       0
  1636 ;;      Totals:         0       0       0       0       0       0       0
  1637 ;;Total ram usage:        0 bytes
  1638 ;; Hardware stack levels used: 1
  1639 ;; Hardware stack levels required when called: 5
  1640 ;; This function calls:
  1641 ;;		Nothing
  1642 ;; This function is called by:
  1643 ;;		_SYSTEM_Initialize
  1644 ;; This function uses a non-reentrant model
  1645 ;;
  1646                           
  1647                           	psect	text7
  1648   0008BA                     __ptext7:
  1649                           	callstack 0
  1650   0008BA                     _UART_Initialize:
  1651                           	callstack 24
  1652   0008BA                     
  1653                           ;setting_hardaware/uart.c: 21:     TRISCbits.TRISC6 = 1;
  1654   0008BA  8C94               	bsf	148,6,c	;volatile
  1655                           
  1656                           ;setting_hardaware/uart.c: 22:     TRISCbits.TRISC7 = 1;
  1657   0008BC  8E94               	bsf	148,7,c	;volatile
  1658                           
  1659                           ;setting_hardaware/uart.c: 25:     TXSTAbits.SYNC = 0;
  1660   0008BE  98AC               	bcf	172,4,c	;volatile
  1661                           
  1662                           ;setting_hardaware/uart.c: 26:     BAUDCONbits.BRG16 = 0;
  1663   0008C0  96B8               	bcf	184,3,c	;volatile
  1664                           
  1665                           ;setting_hardaware/uart.c: 27:     TXSTAbits.BRGH = 1;
  1666   0008C2  84AC               	bsf	172,2,c	;volatile
  1667   0008C4                     
  1668                           ;setting_hardaware/uart.c: 28:     SPBRG = 25;
  1669   0008C4  0E19               	movlw	25
  1670   0008C6  6EAF               	movwf	175,c	;volatile
  1671   0008C8                     
  1672                           ;setting_hardaware/uart.c: 31:     RCSTAbits.SPEN = 1;
  1673   0008C8  8EAB               	bsf	171,7,c	;volatile
  1674   0008CA                     
  1675                           ;setting_hardaware/uart.c: 32:     PIR1bits.TXIF = 0;
  1676   0008CA  989E               	bcf	158,4,c	;volatile
  1677   0008CC                     
  1678                           ;setting_hardaware/uart.c: 33:     PIR1bits.RCIF = 1;
  1679   0008CC  8A9E               	bsf	158,5,c	;volatile
  1680   0008CE                     
  1681                           ;setting_hardaware/uart.c: 34:     TXSTAbits.TXEN = 1;
  1682   0008CE  8AAC               	bsf	172,5,c	;volatile
  1683   0008D0                     
  1684                           ;setting_hardaware/uart.c: 35:     RCSTAbits.CREN = 1;
  1685   0008D0  88AB               	bsf	171,4,c	;volatile
  1686   0008D2                     
  1687                           ;setting_hardaware/uart.c: 36:     PIE1bits.TXIE = 0;
  1688   0008D2  989D               	bcf	157,4,c	;volatile
  1689   0008D4                     
  1690                           ;setting_hardaware/uart.c: 37:     IPR1bits.TXIP = 0;
  1691   0008D4  989F               	bcf	159,4,c	;volatile
  1692   0008D6                     
  1693                           ;setting_hardaware/uart.c: 38:     PIE1bits.RCIE = 1;
  1694   0008D6  8A9D               	bsf	157,5,c	;volatile
  1695   0008D8                     
  1696                           ;setting_hardaware/uart.c: 39:     IPR1bits.RCIP = 0;
  1697   0008D8  9A9F               	bcf	159,5,c	;volatile
  1698   0008DA  0012               	return		;funcret
  1699   0008DC                     __end_of_UART_Initialize:
  1700                           	callstack 0
  1701                           
  1702 ;; *************** function _OSCILLATOR_Initialize *****************
  1703 ;; Defined at:
  1704 ;;		line 73 in file "setting_hardaware/setting.c"
  1705 ;; Parameters:    Size  Location     Type
  1706 ;;		None
  1707 ;; Auto vars:     Size  Location     Type
  1708 ;;		None
  1709 ;; Return value:  Size  Location     Type
  1710 ;;                  1    wreg      void 
  1711 ;; Registers used:
  1712 ;;		None
  1713 ;; Tracked objects:
  1714 ;;		On entry : 0/0
  1715 ;;		On exit  : 0/0
  1716 ;;		Unchanged: 0/0
  1717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1718 ;;      Params:         0       0       0       0       0       0       0
  1719 ;;      Locals:         0       0       0       0       0       0       0
  1720 ;;      Temps:          0       0       0       0       0       0       0
  1721 ;;      Totals:         0       0       0       0       0       0       0
  1722 ;;Total ram usage:        0 bytes
  1723 ;; Hardware stack levels used: 1
  1724 ;; Hardware stack levels required when called: 5
  1725 ;; This function calls:
  1726 ;;		Nothing
  1727 ;; This function is called by:
  1728 ;;		_SYSTEM_Initialize
  1729 ;; This function uses a non-reentrant model
  1730 ;;
  1731                           
  1732                           	psect	text8
  1733   00097C                     __ptext8:
  1734                           	callstack 0
  1735   00097C                     _OSCILLATOR_Initialize:
  1736                           	callstack 24
  1737   00097C                     
  1738                           ;setting_hardaware/setting.c: 75:     IRCF2 = 1;
  1739   00097C  8CD3               	bsf	4051,6,c	;volatile
  1740                           
  1741                           ;setting_hardaware/setting.c: 76:     IRCF1 = 1;
  1742   00097E  8AD3               	bsf	4051,5,c	;volatile
  1743                           
  1744                           ;setting_hardaware/setting.c: 77:     IRCF0 = 0;
  1745   000980  98D3               	bcf	4051,4,c	;volatile
  1746   000982  0012               	return		;funcret
  1747   000984                     __end_of_OSCILLATOR_Initialize:
  1748                           	callstack 0
  1749                           
  1750 ;; *************** function _INTERRUPT_Initialize *****************
  1751 ;; Defined at:
  1752 ;;		line 3 in file "setting_hardaware/interrupt_manager.c"
  1753 ;; Parameters:    Size  Location     Type
  1754 ;;		None
  1755 ;; Auto vars:     Size  Location     Type
  1756 ;;		None
  1757 ;; Return value:  Size  Location     Type
  1758 ;;                  1    wreg      void 
  1759 ;; Registers used:
  1760 ;;		None
  1761 ;; Tracked objects:
  1762 ;;		On entry : 0/0
  1763 ;;		On exit  : 0/0
  1764 ;;		Unchanged: 0/0
  1765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1766 ;;      Params:         0       0       0       0       0       0       0
  1767 ;;      Locals:         0       0       0       0       0       0       0
  1768 ;;      Temps:          0       0       0       0       0       0       0
  1769 ;;      Totals:         0       0       0       0       0       0       0
  1770 ;;Total ram usage:        0 bytes
  1771 ;; Hardware stack levels used: 1
  1772 ;; Hardware stack levels required when called: 5
  1773 ;; This function calls:
  1774 ;;		Nothing
  1775 ;; This function is called by:
  1776 ;;		_SYSTEM_Initialize
  1777 ;; This function uses a non-reentrant model
  1778 ;;
  1779                           
  1780                           	psect	text9
  1781   000984                     __ptext9:
  1782                           	callstack 0
  1783   000984                     _INTERRUPT_Initialize:
  1784                           	callstack 24
  1785   000984                     
  1786                           ;setting_hardaware/interrupt_manager.c: 5:     RCONbits.IPEN = 1;
  1787   000984  8ED0               	bsf	208,7,c	;volatile
  1788                           
  1789                           ;setting_hardaware/interrupt_manager.c: 6:     INTCONbits.GIEH = 1;
  1790   000986  8EF2               	bsf	242,7,c	;volatile
  1791                           
  1792                           ;setting_hardaware/interrupt_manager.c: 7:     INTCONbits.GIEL = 1;
  1793   000988  8CF2               	bsf	242,6,c	;volatile
  1794   00098A  0012               	return		;funcret
  1795   00098C                     __end_of_INTERRUPT_Initialize:
  1796                           	callstack 0
  1797                           
  1798 ;; *************** function _BreakOn *****************
  1799 ;; Defined at:
  1800 ;;		line 40 in file "main.c"
  1801 ;; Parameters:    Size  Location     Type
  1802 ;;  num             2    1[BANK0 ] int 
  1803 ;; Auto vars:     Size  Location     Type
  1804 ;;		None
  1805 ;; Return value:  Size  Location     Type
  1806 ;;                  1    wreg      void 
  1807 ;; Registers used:
  1808 ;;		wreg, status,2, status,0, cstack
  1809 ;; Tracked objects:
  1810 ;;		On entry : 0/0
  1811 ;;		On exit  : 0/0
  1812 ;;		Unchanged: 0/0
  1813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1814 ;;      Params:         0       2       0       0       0       0       0
  1815 ;;      Locals:         0       0       0       0       0       0       0
  1816 ;;      Temps:          0       0       0       0       0       0       0
  1817 ;;      Totals:         0       2       0       0       0       0       0
  1818 ;;Total ram usage:        2 bytes
  1819 ;; Hardware stack levels used: 1
  1820 ;; Hardware stack levels required when called: 6
  1821 ;; This function calls:
  1822 ;;		_displayBinary
  1823 ;; This function is called by:
  1824 ;;		_main
  1825 ;; This function uses a non-reentrant model
  1826 ;;
  1827                           
  1828                           	psect	text10
  1829   000960                     __ptext10:
  1830                           	callstack 0
  1831   000960                     _BreakOn:
  1832                           	callstack 24
  1833   000960                     
  1834                           ;main.c: 41:     displayBinary(num);
  1835   000960  C081  F055         	movff	BreakOn@num,displayBinary@num
  1836   000964  C082  F056         	movff	BreakOn@num+1,displayBinary@num+1
  1837   000968  EC77  F003         	call	_displayBinary	;wreg free
  1838   00096C  0012               	return		;funcret
  1839   00096E                     __end_of_BreakOn:
  1840                           	callstack 0
  1841                           
  1842 ;; *************** function _BreakOff *****************
  1843 ;; Defined at:
  1844 ;;		line 44 in file "main.c"
  1845 ;; Parameters:    Size  Location     Type
  1846 ;;  num             2    1[BANK0 ] int 
  1847 ;; Auto vars:     Size  Location     Type
  1848 ;;		None
  1849 ;; Return value:  Size  Location     Type
  1850 ;;                  1    wreg      void 
  1851 ;; Registers used:
  1852 ;;		wreg, status,2, status,0, cstack
  1853 ;; Tracked objects:
  1854 ;;		On entry : 0/0
  1855 ;;		On exit  : 0/0
  1856 ;;		Unchanged: 0/0
  1857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1858 ;;      Params:         0       2       0       0       0       0       0
  1859 ;;      Locals:         0       0       0       0       0       0       0
  1860 ;;      Temps:          0       0       0       0       0       0       0
  1861 ;;      Totals:         0       2       0       0       0       0       0
  1862 ;;Total ram usage:        2 bytes
  1863 ;; Hardware stack levels used: 1
  1864 ;; Hardware stack levels required when called: 6
  1865 ;; This function calls:
  1866 ;;		_displayBinary
  1867 ;; This function is called by:
  1868 ;;		_main
  1869 ;; This function uses a non-reentrant model
  1870 ;;
  1871                           
  1872                           	psect	text11
  1873   00096E                     __ptext11:
  1874                           	callstack 0
  1875   00096E                     _BreakOff:
  1876                           	callstack 24
  1877   00096E                     
  1878                           ;main.c: 45:     displayBinary(num);
  1879   00096E  C081  F055         	movff	BreakOff@num,displayBinary@num
  1880   000972  C082  F056         	movff	BreakOff@num+1,displayBinary@num+1
  1881   000976  EC77  F003         	call	_displayBinary	;wreg free
  1882   00097A  0012               	return		;funcret
  1883   00097C                     __end_of_BreakOff:
  1884                           	callstack 0
  1885                           
  1886 ;; *************** function _displayBinary *****************
  1887 ;; Defined at:
  1888 ;;		line 12 in file "main.c"
  1889 ;; Parameters:    Size  Location     Type
  1890 ;;  num             2   40[COMRAM] int 
  1891 ;; Auto vars:     Size  Location     Type
  1892 ;;		None
  1893 ;; Return value:  Size  Location     Type
  1894 ;;                  1    wreg      void 
  1895 ;; Registers used:
  1896 ;;		wreg, status,2, status,0
  1897 ;; Tracked objects:
  1898 ;;		On entry : 0/0
  1899 ;;		On exit  : 0/0
  1900 ;;		Unchanged: 0/0
  1901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1902 ;;      Params:         2       0       0       0       0       0       0
  1903 ;;      Locals:         0       0       0       0       0       0       0
  1904 ;;      Temps:          0       1       0       0       0       0       0
  1905 ;;      Totals:         2       1       0       0       0       0       0
  1906 ;;Total ram usage:        3 bytes
  1907 ;; Hardware stack levels used: 1
  1908 ;; Hardware stack levels required when called: 5
  1909 ;; This function calls:
  1910 ;;		Nothing
  1911 ;; This function is called by:
  1912 ;;		_initialState
  1913 ;;		_ledRightOn
  1914 ;;		_ledRightOff
  1915 ;;		_ledLeftOn
  1916 ;;		_ledLeftOff
  1917 ;;		_BreakOn
  1918 ;;		_BreakOff
  1919 ;; This function uses a non-reentrant model
  1920 ;;
  1921                           
  1922                           	psect	text12
  1923   0006EE                     __ptext12:
  1924                           	callstack 0
  1925   0006EE                     _displayBinary:
  1926                           	callstack 24
  1927   0006EE                     
  1928                           ;main.c: 14:     LATAbits.LATA1 = (num & 0x01) ? 1 : 0;
  1929   0006EE  B055               	btfsc	displayBinary@num^0,0,c
  1930   0006F0  EF7C  F003         	goto	u821
  1931   0006F4  EF81  F003         	goto	u820
  1932   0006F8                     u821:
  1933   0006F8  0100               	movlb	0	; () banked
  1934   0006FA  6B80               	clrf	??_displayBinary& (0+255),b
  1935   0006FC  2B80               	incf	??_displayBinary& (0+255),f,b
  1936   0006FE  EF83  F003         	goto	u838
  1937   000702                     u820:
  1938   000702  0100               	movlb	0	; () banked
  1939   000704  6B80               	clrf	??_displayBinary& (0+255),b
  1940   000706                     u838:
  1941   000706  4780               	rlncf	??_displayBinary& (0+255),f,b
  1942   000708  5089               	movf	137,w,c	;volatile
  1943   00070A  1980               	xorwf	??_displayBinary& (0+255),w,b
  1944   00070C  0BFD               	andlw	-3
  1945   00070E  1980               	xorwf	??_displayBinary& (0+255),w,b
  1946   000710  6E89               	movwf	137,c	;volatile
  1947                           
  1948                           ;main.c: 15:     LATAbits.LATA2 = (num & 0x02) ? 1 : 0;
  1949   000712  B255               	btfsc	displayBinary@num^0,1,c
  1950   000714  EF8E  F003         	goto	u841
  1951   000718  EF92  F003         	goto	u840
  1952   00071C                     u841:
  1953   00071C  6B80               	clrf	??_displayBinary& (0+255),b
  1954   00071E  2B80               	incf	??_displayBinary& (0+255),f,b
  1955   000720  EF94  F003         	goto	u858
  1956   000724                     u840:
  1957   000724  0100               	movlb	0	; () banked
  1958   000726  6B80               	clrf	??_displayBinary& (0+255),b
  1959   000728                     u858:
  1960   000728  4780               	rlncf	??_displayBinary& (0+255),f,b
  1961   00072A  4780               	rlncf	??_displayBinary& (0+255),f,b
  1962   00072C  5089               	movf	137,w,c	;volatile
  1963   00072E  1980               	xorwf	??_displayBinary& (0+255),w,b
  1964   000730  0BFB               	andlw	-5
  1965   000732  1980               	xorwf	??_displayBinary& (0+255),w,b
  1966   000734  6E89               	movwf	137,c	;volatile
  1967                           
  1968                           ;main.c: 16:     LATAbits.LATA3 = (num & 0x04) ? 1 : 0;
  1969   000736  B455               	btfsc	displayBinary@num^0,2,c
  1970   000738  EFA0  F003         	goto	u861
  1971   00073C  EFA4  F003         	goto	u860
  1972   000740                     u861:
  1973   000740  6B80               	clrf	??_displayBinary& (0+255),b
  1974   000742  2B80               	incf	??_displayBinary& (0+255),f,b
  1975   000744  EFA6  F003         	goto	u878
  1976   000748                     u860:
  1977   000748  0100               	movlb	0	; () banked
  1978   00074A  6B80               	clrf	??_displayBinary& (0+255),b
  1979   00074C                     u878:
  1980   00074C  4780               	rlncf	??_displayBinary& (0+255),f,b
  1981   00074E  4780               	rlncf	??_displayBinary& (0+255),f,b
  1982   000750  4780               	rlncf	??_displayBinary& (0+255),f,b
  1983   000752  5089               	movf	137,w,c	;volatile
  1984   000754  1980               	xorwf	??_displayBinary& (0+255),w,b
  1985   000756  0BF7               	andlw	-9
  1986   000758  1980               	xorwf	??_displayBinary& (0+255),w,b
  1987   00075A  6E89               	movwf	137,c	;volatile
  1988                           
  1989                           ;main.c: 17:     LATAbits.LATA4 = (num & 0x08) ? 1 : 0;
  1990   00075C  B655               	btfsc	displayBinary@num^0,3,c
  1991   00075E  EFB3  F003         	goto	u881
  1992   000762  EFB7  F003         	goto	u880
  1993   000766                     u881:
  1994   000766  6B80               	clrf	??_displayBinary& (0+255),b
  1995   000768  2B80               	incf	??_displayBinary& (0+255),f,b
  1996   00076A  EFB9  F003         	goto	u898
  1997   00076E                     u880:
  1998   00076E  0100               	movlb	0	; () banked
  1999   000770  6B80               	clrf	??_displayBinary& (0+255),b
  2000   000772                     u898:
  2001   000772  3B80               	swapf	??_displayBinary& (0+255),f,b
  2002   000774  5089               	movf	137,w,c	;volatile
  2003   000776  1980               	xorwf	??_displayBinary& (0+255),w,b
  2004   000778  0BEF               	andlw	-17
  2005   00077A  1980               	xorwf	??_displayBinary& (0+255),w,b
  2006   00077C  6E89               	movwf	137,c	;volatile
  2007   00077E                     
  2008                           ; BSR set to: 0
  2009   00077E  0012               	return		;funcret
  2010   000780                     __end_of_displayBinary:
  2011                           	callstack 0
  2012                           
  2013 ;; *************** function _Lo_ISR *****************
  2014 ;; Defined at:
  2015 ;;		line 106 in file "main.c"
  2016 ;; Parameters:    Size  Location     Type
  2017 ;;		None
  2018 ;; Auto vars:     Size  Location     Type
  2019 ;;  command        20   20[COMRAM] unsigned char [20]
  2020 ;; Return value:  Size  Location     Type
  2021 ;;                  1    wreg      void 
  2022 ;; Registers used:
  2023 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2024 ;; Tracked objects:
  2025 ;;		On entry : 0/0
  2026 ;;		On exit  : 0/0
  2027 ;;		Unchanged: 0/0
  2028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2029 ;;      Params:         0       0       0       0       0       0       0
  2030 ;;      Locals:        20       0       0       0       0       0       0
  2031 ;;      Temps:         12       0       0       0       0       0       0
  2032 ;;      Totals:        32       0       0       0       0       0       0
  2033 ;;Total ram usage:       32 bytes
  2034 ;; Hardware stack levels used: 1
  2035 ;; Hardware stack levels required when called: 4
  2036 ;; This function calls:
  2037 ;;		_ClearBuffer
  2038 ;;		_GetString
  2039 ;;		_MyusartRead
  2040 ;;		_strcpy
  2041 ;;		_strlen
  2042 ;; This function is called by:
  2043 ;;		Interrupt level 1
  2044 ;; This function uses a non-reentrant model
  2045 ;;
  2046                           
  2047                           	psect	intcodelo
  2048   000018                     __pintcodelo:
  2049                           	callstack 0
  2050   000018                     _Lo_ISR:
  2051                           	callstack 24
  2052                           
  2053                           ; BSR set to: 0
  2054                           ;incstack = 0
  2055   000018  8057               	bsf	int$flags,0,c	;set compiler interrupt flag (level 1)
  2056   00001A  CFD8 F036          	movff	status,??_Lo_ISR+1
  2057   00001E  CFE8 F037          	movff	wreg,??_Lo_ISR+2
  2058   000022  CFE0 F038          	movff	bsr,??_Lo_ISR+3
  2059   000026  CFE1 F039          	movff	fsr1l,??_Lo_ISR+4
  2060   00002A  CFE2 F03A          	movff	fsr1h,??_Lo_ISR+5
  2061   00002E  CFD9 F03B          	movff	fsr2l,??_Lo_ISR+6
  2062   000032  CFDA F03C          	movff	fsr2h,??_Lo_ISR+7
  2063   000036  CFF6 F03D          	movff	tblptrl,??_Lo_ISR+8
  2064   00003A  CFF7 F03E          	movff	tblptrh,??_Lo_ISR+9
  2065   00003E  CFF8 F03F          	movff	tblptru,??_Lo_ISR+10
  2066   000042  CFF5 F040          	movff	tablat,??_Lo_ISR+11
  2067   000046                     
  2068                           ;main.c: 108:     if(RCIF)
  2069   000046  AA9E               	btfss	3998,5,c	;volatile
  2070   000048  EF28  F000         	goto	i1u56_21
  2071   00004C  EF2A  F000         	goto	i1u56_20
  2072   000050                     i1u56_21:
  2073   000050  EFA4  F001         	goto	i1l204
  2074   000054                     i1u56_20:
  2075   000054                     
  2076                           ;main.c: 109:     {;main.c: 110:         if(RCSTAbits.OERR)
  2077   000054  A2AB               	btfss	171,1,c	;volatile
  2078   000056  EF2F  F000         	goto	i1u57_21
  2079   00005A  EF31  F000         	goto	i1u57_20
  2080   00005E                     i1u57_21:
  2081   00005E  EF34  F000         	goto	i1l1326
  2082   000062                     i1u57_20:
  2083   000062                     
  2084                           ;main.c: 111:         {;main.c: 112:             CREN = 0;
  2085   000062  98AB               	bcf	4011,4,c	;volatile
  2086                           
  2087                           ;main.c: 113:             __nop();
  2088   000064  0000               	nop	
  2089                           
  2090                           ;main.c: 114:             CREN = 1;
  2091   000066  88AB               	bsf	4011,4,c	;volatile
  2092   000068                     i1l1326:
  2093                           
  2094                           ;main.c: 117:         MyusartRead();
  2095   000068  EC29  F004         	call	_MyusartRead	;wreg free
  2096   00006C                     
  2097                           ;main.c: 118:         char command[20];;main.c: 119:         if(RCREG == '\r' || RCREG =
      +                          = '\n'){
  2098   00006C  0E0D               	movlw	13
  2099   00006E  18AE               	xorwf	174,w,c	;volatile
  2100   000070  B4D8               	btfsc	status,2,c
  2101   000072  EF3D  F000         	goto	i1u58_21
  2102   000076  EF3F  F000         	goto	i1u58_20
  2103   00007A                     i1u58_21:
  2104   00007A  EF48  F000         	goto	i1l1332
  2105   00007E                     i1u58_20:
  2106   00007E  0E0A               	movlw	10
  2107   000080  18AE               	xorwf	174,w,c	;volatile
  2108   000082  A4D8               	btfss	status,2,c
  2109   000084  EF46  F000         	goto	i1u59_21
  2110   000088  EF48  F000         	goto	i1u59_20
  2111   00008C                     i1u59_21:
  2112   00008C  EF54  F000         	goto	i1l1336
  2113   000090                     i1u59_20:
  2114   000090                     i1l1332:
  2115                           
  2116                           ;main.c: 120:             strcpy(command, GetString());
  2117   000090  0E41               	movlw	low Lo_ISR@command
  2118   000092  6E2F               	movwf	strcpy@dest^0,c
  2119   000094  ECC9  F004         	call	_GetString	;wreg free
  2120   000098  6E35               	movwf	??_Lo_ISR^0,c
  2121   00009A  C035  F030         	movff	??_Lo_ISR,strcpy@src
  2122   00009E  6A31               	clrf	(strcpy@src+1)^0,c
  2123   0000A0  ECC0  F003         	call	_strcpy	;wreg free
  2124   0000A4                     
  2125                           ;main.c: 121:             ClearBuffer();
  2126   0000A4  EC0B  F004         	call	_ClearBuffer	;wreg free
  2127   0000A8                     i1l1336:
  2128                           
  2129                           ;main.c: 123:         if(command[0] == 'L' && command[1] == 'R' && command[2] == 'N' && 
      +                          strlen(command) == 3){
  2130   0000A8  0E4C               	movlw	76
  2131   0000AA  1841               	xorwf	Lo_ISR@command^0,w,c
  2132   0000AC  A4D8               	btfss	status,2,c
  2133   0000AE  EF5B  F000         	goto	i1u60_21
  2134   0000B2  EF5D  F000         	goto	i1u60_20
  2135   0000B6                     i1u60_21:
  2136   0000B6  EF8F  F000         	goto	i1l1354
  2137   0000BA                     i1u60_20:
  2138   0000BA  0E52               	movlw	82
  2139   0000BC  1842               	xorwf	(Lo_ISR@command+1)^0,w,c
  2140   0000BE  A4D8               	btfss	status,2,c
  2141   0000C0  EF64  F000         	goto	i1u61_21
  2142   0000C4  EF66  F000         	goto	i1u61_20
  2143   0000C8                     i1u61_21:
  2144   0000C8  EF8F  F000         	goto	i1l1354
  2145   0000CC                     i1u61_20:
  2146   0000CC  0E4E               	movlw	78
  2147   0000CE  1843               	xorwf	(Lo_ISR@command+2)^0,w,c
  2148   0000D0  A4D8               	btfss	status,2,c
  2149   0000D2  EF6D  F000         	goto	i1u62_21
  2150   0000D6  EF6F  F000         	goto	i1u62_20
  2151   0000DA                     i1u62_21:
  2152   0000DA  EF8F  F000         	goto	i1l1354
  2153   0000DE                     i1u62_20:
  2154   0000DE  0E41               	movlw	low Lo_ISR@command
  2155   0000E0  6E2D               	movwf	strlen@s^0,c
  2156   0000E2  EC46  F004         	call	_strlen	;wreg free
  2157   0000E6  0E03               	movlw	3
  2158   0000E8  182D               	xorwf	?_strlen^0,w,c
  2159   0000EA  102E               	iorwf	(?_strlen+1)^0,w,c
  2160   0000EC  A4D8               	btfss	status,2,c
  2161   0000EE  EF7B  F000         	goto	i1u63_21
  2162   0000F2  EF7D  F000         	goto	i1u63_20
  2163   0000F6                     i1u63_21:
  2164   0000F6  EF8F  F000         	goto	i1l1354
  2165   0000FA                     i1u63_20:
  2166   0000FA                     
  2167                           ;main.c: 124:             state = 1;
  2168   0000FA  0E00               	movlw	0
  2169   0000FC  6E16               	movwf	(_state+1)^0,c
  2170   0000FE  0E01               	movlw	1
  2171   000100  6E15               	movwf	_state^0,c
  2172   000102                     
  2173                           ;main.c: 125:             ClearBuffer();
  2174   000102  EC0B  F004         	call	_ClearBuffer	;wreg free
  2175   000106                     
  2176                           ;main.c: 126:             strcpy(command, "");
  2177   000106  0E41               	movlw	low Lo_ISR@command
  2178   000108  6E2F               	movwf	strcpy@dest^0,c
  2179   00010A  0E03               	movlw	low (STR_1+2)
  2180   00010C  6E30               	movwf	strcpy@src^0,c
  2181   00010E  5030               	movf	strcpy@src^0,w,c
  2182   000110  A4D8               	btfss	status,2,c
  2183   000112  0E06               	movlw	high __smallconst
  2184   000114  6E31               	movwf	(strcpy@src+1)^0,c
  2185   000116  ECC0  F003         	call	_strcpy	;wreg free
  2186   00011A  EFA4  F001         	goto	i1l204
  2187   00011E                     i1l1354:
  2188   00011E  0E4C               	movlw	76
  2189   000120  1841               	xorwf	Lo_ISR@command^0,w,c
  2190   000122  A4D8               	btfss	status,2,c
  2191   000124  EF96  F000         	goto	i1u64_21
  2192   000128  EF98  F000         	goto	i1u64_20
  2193   00012C                     i1u64_21:
  2194   00012C  EFCA  F000         	goto	i1l1372
  2195   000130                     i1u64_20:
  2196   000130  0E52               	movlw	82
  2197   000132  1842               	xorwf	(Lo_ISR@command+1)^0,w,c
  2198   000134  A4D8               	btfss	status,2,c
  2199   000136  EF9F  F000         	goto	i1u65_21
  2200   00013A  EFA1  F000         	goto	i1u65_20
  2201   00013E                     i1u65_21:
  2202   00013E  EFCA  F000         	goto	i1l1372
  2203   000142                     i1u65_20:
  2204   000142  0E46               	movlw	70
  2205   000144  1843               	xorwf	(Lo_ISR@command+2)^0,w,c
  2206   000146  A4D8               	btfss	status,2,c
  2207   000148  EFA8  F000         	goto	i1u66_21
  2208   00014C  EFAA  F000         	goto	i1u66_20
  2209   000150                     i1u66_21:
  2210   000150  EFCA  F000         	goto	i1l1372
  2211   000154                     i1u66_20:
  2212   000154  0E41               	movlw	low Lo_ISR@command
  2213   000156  6E2D               	movwf	strlen@s^0,c
  2214   000158  EC46  F004         	call	_strlen	;wreg free
  2215   00015C  0E03               	movlw	3
  2216   00015E  182D               	xorwf	?_strlen^0,w,c
  2217   000160  102E               	iorwf	(?_strlen+1)^0,w,c
  2218   000162  A4D8               	btfss	status,2,c
  2219   000164  EFB6  F000         	goto	i1u67_21
  2220   000168  EFB8  F000         	goto	i1u67_20
  2221   00016C                     i1u67_21:
  2222   00016C  EFCA  F000         	goto	i1l1372
  2223   000170                     i1u67_20:
  2224   000170                     
  2225                           ;main.c: 130:             state = 2;
  2226   000170  0E00               	movlw	0
  2227   000172  6E16               	movwf	(_state+1)^0,c
  2228   000174  0E02               	movlw	2
  2229   000176  6E15               	movwf	_state^0,c
  2230   000178                     
  2231                           ;main.c: 131:             ClearBuffer();
  2232   000178  EC0B  F004         	call	_ClearBuffer	;wreg free
  2233   00017C                     
  2234                           ;main.c: 132:             strcpy(command, "");
  2235   00017C  0E41               	movlw	low Lo_ISR@command
  2236   00017E  6E2F               	movwf	strcpy@dest^0,c
  2237   000180  0E03               	movlw	low (STR_1+2)
  2238   000182  6E30               	movwf	strcpy@src^0,c
  2239   000184  5030               	movf	strcpy@src^0,w,c
  2240   000186  A4D8               	btfss	status,2,c
  2241   000188  0E06               	movlw	high __smallconst
  2242   00018A  6E31               	movwf	(strcpy@src+1)^0,c
  2243   00018C  ECC0  F003         	call	_strcpy	;wreg free
  2244   000190  EFA4  F001         	goto	i1l204
  2245   000194                     i1l1372:
  2246   000194  0E4C               	movlw	76
  2247   000196  1841               	xorwf	Lo_ISR@command^0,w,c
  2248   000198  A4D8               	btfss	status,2,c
  2249   00019A  EFD1  F000         	goto	i1u68_21
  2250   00019E  EFD3  F000         	goto	i1u68_20
  2251   0001A2                     i1u68_21:
  2252   0001A2  EF05  F001         	goto	i1l1390
  2253   0001A6                     i1u68_20:
  2254   0001A6  0E4C               	movlw	76
  2255   0001A8  1842               	xorwf	(Lo_ISR@command+1)^0,w,c
  2256   0001AA  A4D8               	btfss	status,2,c
  2257   0001AC  EFDA  F000         	goto	i1u69_21
  2258   0001B0  EFDC  F000         	goto	i1u69_20
  2259   0001B4                     i1u69_21:
  2260   0001B4  EF05  F001         	goto	i1l1390
  2261   0001B8                     i1u69_20:
  2262   0001B8  0E4E               	movlw	78
  2263   0001BA  1843               	xorwf	(Lo_ISR@command+2)^0,w,c
  2264   0001BC  A4D8               	btfss	status,2,c
  2265   0001BE  EFE3  F000         	goto	i1u70_21
  2266   0001C2  EFE5  F000         	goto	i1u70_20
  2267   0001C6                     i1u70_21:
  2268   0001C6  EF05  F001         	goto	i1l1390
  2269   0001CA                     i1u70_20:
  2270   0001CA  0E41               	movlw	low Lo_ISR@command
  2271   0001CC  6E2D               	movwf	strlen@s^0,c
  2272   0001CE  EC46  F004         	call	_strlen	;wreg free
  2273   0001D2  0E03               	movlw	3
  2274   0001D4  182D               	xorwf	?_strlen^0,w,c
  2275   0001D6  102E               	iorwf	(?_strlen+1)^0,w,c
  2276   0001D8  A4D8               	btfss	status,2,c
  2277   0001DA  EFF1  F000         	goto	i1u71_21
  2278   0001DE  EFF3  F000         	goto	i1u71_20
  2279   0001E2                     i1u71_21:
  2280   0001E2  EF05  F001         	goto	i1l1390
  2281   0001E6                     i1u71_20:
  2282   0001E6                     
  2283                           ;main.c: 136:             state = 3;
  2284   0001E6  0E00               	movlw	0
  2285   0001E8  6E16               	movwf	(_state+1)^0,c
  2286   0001EA  0E03               	movlw	3
  2287   0001EC  6E15               	movwf	_state^0,c
  2288   0001EE                     
  2289                           ;main.c: 137:             ClearBuffer();
  2290   0001EE  EC0B  F004         	call	_ClearBuffer	;wreg free
  2291   0001F2                     
  2292                           ;main.c: 138:             strcpy(command, "");
  2293   0001F2  0E41               	movlw	low Lo_ISR@command
  2294   0001F4  6E2F               	movwf	strcpy@dest^0,c
  2295   0001F6  0E03               	movlw	low (STR_1+2)
  2296   0001F8  6E30               	movwf	strcpy@src^0,c
  2297   0001FA  5030               	movf	strcpy@src^0,w,c
  2298   0001FC  A4D8               	btfss	status,2,c
  2299   0001FE  0E06               	movlw	high __smallconst
  2300   000200  6E31               	movwf	(strcpy@src+1)^0,c
  2301   000202  ECC0  F003         	call	_strcpy	;wreg free
  2302   000206  EFA4  F001         	goto	i1l204
  2303   00020A                     i1l1390:
  2304   00020A  0E4C               	movlw	76
  2305   00020C  1841               	xorwf	Lo_ISR@command^0,w,c
  2306   00020E  A4D8               	btfss	status,2,c
  2307   000210  EF0C  F001         	goto	i1u72_21
  2308   000214  EF0E  F001         	goto	i1u72_20
  2309   000218                     i1u72_21:
  2310   000218  EF40  F001         	goto	i1l1408
  2311   00021C                     i1u72_20:
  2312   00021C  0E4C               	movlw	76
  2313   00021E  1842               	xorwf	(Lo_ISR@command+1)^0,w,c
  2314   000220  A4D8               	btfss	status,2,c
  2315   000222  EF15  F001         	goto	i1u73_21
  2316   000226  EF17  F001         	goto	i1u73_20
  2317   00022A                     i1u73_21:
  2318   00022A  EF40  F001         	goto	i1l1408
  2319   00022E                     i1u73_20:
  2320   00022E  0E46               	movlw	70
  2321   000230  1843               	xorwf	(Lo_ISR@command+2)^0,w,c
  2322   000232  A4D8               	btfss	status,2,c
  2323   000234  EF1E  F001         	goto	i1u74_21
  2324   000238  EF20  F001         	goto	i1u74_20
  2325   00023C                     i1u74_21:
  2326   00023C  EF40  F001         	goto	i1l1408
  2327   000240                     i1u74_20:
  2328   000240  0E41               	movlw	low Lo_ISR@command
  2329   000242  6E2D               	movwf	strlen@s^0,c
  2330   000244  EC46  F004         	call	_strlen	;wreg free
  2331   000248  0E03               	movlw	3
  2332   00024A  182D               	xorwf	?_strlen^0,w,c
  2333   00024C  102E               	iorwf	(?_strlen+1)^0,w,c
  2334   00024E  A4D8               	btfss	status,2,c
  2335   000250  EF2C  F001         	goto	i1u75_21
  2336   000254  EF2E  F001         	goto	i1u75_20
  2337   000258                     i1u75_21:
  2338   000258  EF40  F001         	goto	i1l1408
  2339   00025C                     i1u75_20:
  2340   00025C                     
  2341                           ;main.c: 142:             state = 4;
  2342   00025C  0E00               	movlw	0
  2343   00025E  6E16               	movwf	(_state+1)^0,c
  2344   000260  0E04               	movlw	4
  2345   000262  6E15               	movwf	_state^0,c
  2346   000264                     
  2347                           ;main.c: 143:             ClearBuffer();
  2348   000264  EC0B  F004         	call	_ClearBuffer	;wreg free
  2349   000268                     
  2350                           ;main.c: 144:             strcpy(command, "");
  2351   000268  0E41               	movlw	low Lo_ISR@command
  2352   00026A  6E2F               	movwf	strcpy@dest^0,c
  2353   00026C  0E03               	movlw	low (STR_1+2)
  2354   00026E  6E30               	movwf	strcpy@src^0,c
  2355   000270  5030               	movf	strcpy@src^0,w,c
  2356   000272  A4D8               	btfss	status,2,c
  2357   000274  0E06               	movlw	high __smallconst
  2358   000276  6E31               	movwf	(strcpy@src+1)^0,c
  2359   000278  ECC0  F003         	call	_strcpy	;wreg free
  2360   00027C  EFA4  F001         	goto	i1l204
  2361   000280                     i1l1408:
  2362   000280  0E42               	movlw	66
  2363   000282  1841               	xorwf	Lo_ISR@command^0,w,c
  2364   000284  A4D8               	btfss	status,2,c
  2365   000286  EF47  F001         	goto	i1u76_21
  2366   00028A  EF49  F001         	goto	i1u76_20
  2367   00028E                     i1u76_21:
  2368   00028E  EF72  F001         	goto	i1l1424
  2369   000292                     i1u76_20:
  2370   000292  0E4E               	movlw	78
  2371   000294  1842               	xorwf	(Lo_ISR@command+1)^0,w,c
  2372   000296  A4D8               	btfss	status,2,c
  2373   000298  EF50  F001         	goto	i1u77_21
  2374   00029C  EF52  F001         	goto	i1u77_20
  2375   0002A0                     i1u77_21:
  2376   0002A0  EF72  F001         	goto	i1l1424
  2377   0002A4                     i1u77_20:
  2378   0002A4  0E41               	movlw	low Lo_ISR@command
  2379   0002A6  6E2D               	movwf	strlen@s^0,c
  2380   0002A8  EC46  F004         	call	_strlen	;wreg free
  2381   0002AC  0E02               	movlw	2
  2382   0002AE  182D               	xorwf	?_strlen^0,w,c
  2383   0002B0  102E               	iorwf	(?_strlen+1)^0,w,c
  2384   0002B2  A4D8               	btfss	status,2,c
  2385   0002B4  EF5E  F001         	goto	i1u78_21
  2386   0002B8  EF60  F001         	goto	i1u78_20
  2387   0002BC                     i1u78_21:
  2388   0002BC  EF72  F001         	goto	i1l1424
  2389   0002C0                     i1u78_20:
  2390   0002C0                     
  2391                           ;main.c: 148:             state = 5;
  2392   0002C0  0E00               	movlw	0
  2393   0002C2  6E16               	movwf	(_state+1)^0,c
  2394   0002C4  0E05               	movlw	5
  2395   0002C6  6E15               	movwf	_state^0,c
  2396   0002C8                     
  2397                           ;main.c: 149:             ClearBuffer();
  2398   0002C8  EC0B  F004         	call	_ClearBuffer	;wreg free
  2399   0002CC                     
  2400                           ;main.c: 150:             strcpy(command, "");
  2401   0002CC  0E41               	movlw	low Lo_ISR@command
  2402   0002CE  6E2F               	movwf	strcpy@dest^0,c
  2403   0002D0  0E03               	movlw	low (STR_1+2)
  2404   0002D2  6E30               	movwf	strcpy@src^0,c
  2405   0002D4  5030               	movf	strcpy@src^0,w,c
  2406   0002D6  A4D8               	btfss	status,2,c
  2407   0002D8  0E06               	movlw	high __smallconst
  2408   0002DA  6E31               	movwf	(strcpy@src+1)^0,c
  2409   0002DC  ECC0  F003         	call	_strcpy	;wreg free
  2410   0002E0  EFA4  F001         	goto	i1l204
  2411   0002E4                     i1l1424:
  2412   0002E4  0E42               	movlw	66
  2413   0002E6  1841               	xorwf	Lo_ISR@command^0,w,c
  2414   0002E8  A4D8               	btfss	status,2,c
  2415   0002EA  EF79  F001         	goto	i1u79_21
  2416   0002EE  EF7B  F001         	goto	i1u79_20
  2417   0002F2                     i1u79_21:
  2418   0002F2  EFA4  F001         	goto	i1l209
  2419   0002F6                     i1u79_20:
  2420   0002F6  0E46               	movlw	70
  2421   0002F8  1842               	xorwf	(Lo_ISR@command+1)^0,w,c
  2422   0002FA  A4D8               	btfss	status,2,c
  2423   0002FC  EF82  F001         	goto	i1u80_21
  2424   000300  EF84  F001         	goto	i1u80_20
  2425   000304                     i1u80_21:
  2426   000304  EFA4  F001         	goto	i1l209
  2427   000308                     i1u80_20:
  2428   000308  0E41               	movlw	low Lo_ISR@command
  2429   00030A  6E2D               	movwf	strlen@s^0,c
  2430   00030C  EC46  F004         	call	_strlen	;wreg free
  2431   000310  0E02               	movlw	2
  2432   000312  182D               	xorwf	?_strlen^0,w,c
  2433   000314  102E               	iorwf	(?_strlen+1)^0,w,c
  2434   000316  A4D8               	btfss	status,2,c
  2435   000318  EF90  F001         	goto	i1u81_21
  2436   00031C  EF92  F001         	goto	i1u81_20
  2437   000320                     i1u81_21:
  2438   000320  EFA4  F001         	goto	i1l209
  2439   000324                     i1u81_20:
  2440   000324                     
  2441                           ;main.c: 154:             state = 6;
  2442   000324  0E00               	movlw	0
  2443   000326  6E16               	movwf	(_state+1)^0,c
  2444   000328  0E06               	movlw	6
  2445   00032A  6E15               	movwf	_state^0,c
  2446   00032C                     
  2447                           ;main.c: 155:             ClearBuffer();
  2448   00032C  EC0B  F004         	call	_ClearBuffer	;wreg free
  2449   000330                     
  2450                           ;main.c: 156:             strcpy(command, "");
  2451   000330  0E41               	movlw	low Lo_ISR@command
  2452   000332  6E2F               	movwf	strcpy@dest^0,c
  2453   000334  0E03               	movlw	low (STR_1+2)
  2454   000336  6E30               	movwf	strcpy@src^0,c
  2455   000338  5030               	movf	strcpy@src^0,w,c
  2456   00033A  A4D8               	btfss	status,2,c
  2457   00033C  0E06               	movlw	high __smallconst
  2458   00033E  6E31               	movwf	(strcpy@src+1)^0,c
  2459   000340  ECC0  F003         	call	_strcpy	;wreg free
  2460   000344  EFA4  F001         	goto	i1l204
  2461   000348                     i1l209:
  2462   000348                     i1l204:
  2463   000348  C040  FFF5         	movff	??_Lo_ISR+11,tablat
  2464   00034C  C03F  FFF8         	movff	??_Lo_ISR+10,tblptru
  2465   000350  C03E  FFF7         	movff	??_Lo_ISR+9,tblptrh
  2466   000354  C03D  FFF6         	movff	??_Lo_ISR+8,tblptrl
  2467   000358  C03C  FFDA         	movff	??_Lo_ISR+7,fsr2h
  2468   00035C  C03B  FFD9         	movff	??_Lo_ISR+6,fsr2l
  2469   000360  C03A  FFE2         	movff	??_Lo_ISR+5,fsr1h
  2470   000364  C039  FFE1         	movff	??_Lo_ISR+4,fsr1l
  2471   000368  C038  FFE0         	movff	??_Lo_ISR+3,bsr
  2472   00036C  C037  FFE8         	movff	??_Lo_ISR+2,wreg
  2473   000370  C036  FFD8         	movff	??_Lo_ISR+1,status
  2474   000374  9057               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  2475   000376  0010               	retfie	
  2476   000378                     __end_of_Lo_ISR:
  2477                           	callstack 0
  2478                           
  2479 ;; *************** function _strlen *****************
  2480 ;; Defined at:
  2481 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\strlen.c"
  2482 ;; Parameters:    Size  Location     Type
  2483 ;;  s               1    0[COMRAM] PTR const unsigned char 
  2484 ;;		 -> Lo_ISR@command(20), 
  2485 ;; Auto vars:     Size  Location     Type
  2486 ;;  a               1    2[COMRAM] PTR const unsigned char 
  2487 ;;		 -> Lo_ISR@command(20), 
  2488 ;; Return value:  Size  Location     Type
  2489 ;;                  2    0[COMRAM] unsigned int 
  2490 ;; Registers used:
  2491 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2492 ;; Tracked objects:
  2493 ;;		On entry : 0/0
  2494 ;;		On exit  : 0/0
  2495 ;;		Unchanged: 0/0
  2496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2497 ;;      Params:         2       0       0       0       0       0       0
  2498 ;;      Locals:         1       0       0       0       0       0       0
  2499 ;;      Temps:          0       0       0       0       0       0       0
  2500 ;;      Totals:         3       0       0       0       0       0       0
  2501 ;;Total ram usage:        3 bytes
  2502 ;; Hardware stack levels used: 1
  2503 ;; Hardware stack levels required when called: 1
  2504 ;; This function calls:
  2505 ;;		Nothing
  2506 ;; This function is called by:
  2507 ;;		_Lo_ISR
  2508 ;; This function uses a non-reentrant model
  2509 ;;
  2510                           
  2511                           	psect	text14
  2512   00088C                     __ptext14:
  2513                           	callstack 0
  2514   00088C                     _strlen:
  2515                           	callstack 26
  2516   00088C  C02D  F02F         	movff	strlen@s,strlen@a
  2517   000890  EF4B  F004         	goto	i1l1262
  2518   000894                     i1l1260:
  2519   000894  2A2D               	incf	strlen@s^0,f,c
  2520   000896                     i1l1262:
  2521   000896  502D               	movf	strlen@s^0,w,c
  2522   000898  6ED9               	movwf	fsr2l,c
  2523   00089A  6ADA               	clrf	fsr2h,c
  2524   00089C  50DF               	movf	indf2,w,c
  2525   00089E  A4D8               	btfss	status,2,c
  2526   0008A0  EF54  F004         	goto	i1u55_21
  2527   0008A4  EF56  F004         	goto	i1u55_20
  2528   0008A8                     i1u55_21:
  2529   0008A8  EF4A  F004         	goto	i1l1260
  2530   0008AC                     i1u55_20:
  2531   0008AC  502F               	movf	strlen@a^0,w,c
  2532   0008AE  5C2D               	subwf	strlen@s^0,w,c
  2533   0008B0  6E2D               	movwf	?_strlen^0,c
  2534   0008B2  6A2E               	clrf	(?_strlen+1)^0,c
  2535   0008B4  BE2D               	btfsc	?_strlen^0,7,c
  2536   0008B6  062E               	decf	(?_strlen+1)^0,f,c
  2537   0008B8  0012               	return		;funcret
  2538   0008BA                     __end_of_strlen:
  2539                           	callstack 0
  2540                           
  2541 ;; *************** function _strcpy *****************
  2542 ;; Defined at:
  2543 ;;		line 3 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\strcpy.c"
  2544 ;; Parameters:    Size  Location     Type
  2545 ;;  dest            1    2[COMRAM] PTR unsigned char 
  2546 ;;		 -> Lo_ISR@command(20), 
  2547 ;;  src             2    3[COMRAM] PTR const unsigned char 
  2548 ;;		 -> STR_7(1), STR_6(1), STR_5(1), STR_4(1), 
  2549 ;;		 -> STR_3(1), STR_2(1), mystring(20), 
  2550 ;; Auto vars:     Size  Location     Type
  2551 ;;  d               1    7[COMRAM] PTR unsigned char 
  2552 ;;		 -> Lo_ISR@command(20), 
  2553 ;; Return value:  Size  Location     Type
  2554 ;;                  1    2[COMRAM] PTR unsigned char 
  2555 ;; Registers used:
  2556 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  2557 ;; Tracked objects:
  2558 ;;		On entry : 0/0
  2559 ;;		On exit  : 0/0
  2560 ;;		Unchanged: 0/0
  2561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2562 ;;      Params:         3       0       0       0       0       0       0
  2563 ;;      Locals:         1       0       0       0       0       0       0
  2564 ;;      Temps:          2       0       0       0       0       0       0
  2565 ;;      Totals:         6       0       0       0       0       0       0
  2566 ;;Total ram usage:        6 bytes
  2567 ;; Hardware stack levels used: 1
  2568 ;; Hardware stack levels required when called: 1
  2569 ;; This function calls:
  2570 ;;		Nothing
  2571 ;; This function is called by:
  2572 ;;		_Lo_ISR
  2573 ;; This function uses a non-reentrant model
  2574 ;;
  2575                           
  2576                           	psect	text15
  2577   000780                     __ptext15:
  2578                           	callstack 0
  2579   000780                     _strcpy:
  2580                           	callstack 26
  2581   000780  C02F  F034         	movff	strcpy@dest,strcpy@d
  2582   000784                     i1l1256:
  2583   000784  5030               	movf	strcpy@src^0,w,c
  2584   000786  6E32               	movwf	??_strcpy^0,c
  2585   000788  5031               	movf	(strcpy@src+1)^0,w,c
  2586   00078A  6E33               	movwf	(??_strcpy+1)^0,c
  2587   00078C  4A30               	infsnz	strcpy@src^0,f,c
  2588   00078E  2A31               	incf	(strcpy@src+1)^0,f,c
  2589   000790  C032  FFF6         	movff	??_strcpy,tblptrl
  2590   000794  C033  FFF7         	movff	??_strcpy+1,tblptrh
  2591   000798  6AF8               	clrf	tblptru,c
  2592   00079A  2A34               	incf	strcpy@d^0,f,c
  2593   00079C  0434               	decf	strcpy@d^0,w,c
  2594   00079E  6ED9               	movwf	fsr2l,c
  2595   0007A0  6ADA               	clrf	fsr2h,c
  2596   0007A2  0E05               	movlw	(high __ramtop+-1)
  2597   0007A4  64F7               	cpfsgt	tblptrh,c
  2598   0007A6  D003               	bra	i1u53_27
  2599   0007A8  0008               	tblrd		*
  2600   0007AA  50F5               	movf	tablat,w,c
  2601   0007AC  D005               	bra	i1u53_20
  2602   0007AE                     i1u53_27:
  2603   0007AE  CFF6 FFE1          	movff	tblptrl,fsr1l
  2604   0007B2  CFF7 FFE2          	movff	tblptrh,fsr1h
  2605   0007B6  50E7               	movf	indf1,w,c
  2606   0007B8                     i1u53_20:
  2607   0007B8  6EDF               	movwf	indf2,c
  2608   0007BA  50DF               	movf	indf2,w,c
  2609   0007BC  A4D8               	btfss	status,2,c
  2610   0007BE  EFE3  F003         	goto	i1u54_21
  2611   0007C2  EFE5  F003         	goto	i1u54_20
  2612   0007C6                     i1u54_21:
  2613   0007C6  EFC2  F003         	goto	i1l1256
  2614   0007CA                     i1u54_20:
  2615   0007CA  0012               	return		;funcret
  2616   0007CC                     __end_of_strcpy:
  2617                           	callstack 0
  2618                           
  2619 ;; *************** function _MyusartRead *****************
  2620 ;; Defined at:
  2621 ;;		line 62 in file "setting_hardaware/uart.c"
  2622 ;; Parameters:    Size  Location     Type
  2623 ;;		None
  2624 ;; Auto vars:     Size  Location     Type
  2625 ;;  receivedData    1    5[COMRAM] unsigned char 
  2626 ;; Return value:  Size  Location     Type
  2627 ;;                  1    wreg      void 
  2628 ;; Registers used:
  2629 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2630 ;; Tracked objects:
  2631 ;;		On entry : 0/0
  2632 ;;		On exit  : 0/0
  2633 ;;		Unchanged: 0/0
  2634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2635 ;;      Params:         0       0       0       0       0       0       0
  2636 ;;      Locals:         1       0       0       0       0       0       0
  2637 ;;      Temps:          0       0       0       0       0       0       0
  2638 ;;      Totals:         1       0       0       0       0       0       0
  2639 ;;Total ram usage:        1 bytes
  2640 ;; Hardware stack levels used: 1
  2641 ;; Hardware stack levels required when called: 3
  2642 ;; This function calls:
  2643 ;;		_UART_Write
  2644 ;;		_UART_Write_Text
  2645 ;; This function is called by:
  2646 ;;		_Lo_ISR
  2647 ;; This function uses a non-reentrant model
  2648 ;;
  2649                           
  2650                           	psect	text16
  2651   000852                     __ptext16:
  2652                           	callstack 0
  2653   000852                     _MyusartRead:
  2654                           	callstack 24
  2655   000852                     
  2656                           ;setting_hardaware/uart.c: 66:     unsigned char receivedData = RCREG;
  2657   000852  CFAE F032          	movff	4014,MyusartRead@receivedData	;volatile
  2658   000856                     
  2659                           ;setting_hardaware/uart.c: 67:     if(receivedData == '\r'){
  2660   000856  0E0D               	movlw	13
  2661   000858  1832               	xorwf	MyusartRead@receivedData^0,w,c
  2662   00085A  A4D8               	btfss	status,2,c
  2663   00085C  EF32  F004         	goto	i1u52_21
  2664   000860  EF34  F004         	goto	i1u52_20
  2665   000864                     i1u52_21:
  2666   000864  EF3A  F004         	goto	i1l1228
  2667   000868                     i1u52_20:
  2668   000868                     
  2669                           ;setting_hardaware/uart.c: 68:         UART_Write_Text("\r\n");
  2670   000868  0E01               	movlw	low STR_1
  2671   00086A  6E2E               	movwf	UART_Write_Text@text^0,c
  2672   00086C  ECE6  F003         	call	_UART_Write_Text	;wreg free
  2673   000870  EF45  F004         	goto	i1l107
  2674   000874                     i1l1228:
  2675                           
  2676                           ;setting_hardaware/uart.c: 71:     mystring[lenStr] = receivedData;
  2677   000874  5017               	movf	_lenStr^0,w,c
  2678   000876  0F19               	addlw	low _mystring
  2679   000878  6ED9               	movwf	fsr2l,c
  2680   00087A  6ADA               	clrf	fsr2h,c
  2681   00087C  C032  FFDF         	movff	MyusartRead@receivedData,indf2
  2682   000880                     
  2683                           ;setting_hardaware/uart.c: 72:     lenStr++;
  2684   000880  4A17               	infsnz	_lenStr^0,f,c
  2685   000882  2A18               	incf	(_lenStr+1)^0,f,c
  2686   000884                     
  2687                           ;setting_hardaware/uart.c: 73:     UART_Write(receivedData);
  2688   000884  5032               	movf	MyusartRead@receivedData^0,w,c
  2689   000886  EC7B  F004         	call	_UART_Write
  2690   00088A                     i1l107:
  2691   00088A  0012               	return		;funcret
  2692   00088C                     __end_of_MyusartRead:
  2693                           	callstack 0
  2694                           
  2695 ;; *************** function _UART_Write_Text *****************
  2696 ;; Defined at:
  2697 ;;		line 51 in file "setting_hardaware/uart.c"
  2698 ;; Parameters:    Size  Location     Type
  2699 ;;  text            1    1[COMRAM] PTR unsigned char 
  2700 ;;		 -> STR_1(3), 
  2701 ;; Auto vars:     Size  Location     Type
  2702 ;;  i               2    3[COMRAM] int 
  2703 ;; Return value:  Size  Location     Type
  2704 ;;                  1    wreg      void 
  2705 ;; Registers used:
  2706 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2707 ;; Tracked objects:
  2708 ;;		On entry : 0/0
  2709 ;;		On exit  : 0/0
  2710 ;;		Unchanged: 0/0
  2711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2712 ;;      Params:         1       0       0       0       0       0       0
  2713 ;;      Locals:         2       0       0       0       0       0       0
  2714 ;;      Temps:          1       0       0       0       0       0       0
  2715 ;;      Totals:         4       0       0       0       0       0       0
  2716 ;;Total ram usage:        4 bytes
  2717 ;; Hardware stack levels used: 1
  2718 ;; Hardware stack levels required when called: 2
  2719 ;; This function calls:
  2720 ;;		_UART_Write
  2721 ;; This function is called by:
  2722 ;;		_MyusartRead
  2723 ;; This function uses a non-reentrant model
  2724 ;;
  2725                           
  2726                           	psect	text17
  2727   0007CC                     __ptext17:
  2728                           	callstack 0
  2729   0007CC                     _UART_Write_Text:
  2730                           	callstack 24
  2731   0007CC                     
  2732                           ;setting_hardaware/uart.c: 52:     for(int i=0;text[i]!='\0';i++)
  2733   0007CC  0E00               	movlw	0
  2734   0007CE  6E31               	movwf	(UART_Write_Text@i+1)^0,c
  2735   0007D0  0E00               	movlw	0
  2736   0007D2  6E30               	movwf	UART_Write_Text@i^0,c
  2737   0007D4  EFF9  F003         	goto	i1l1216
  2738   0007D8                     i1l1212:
  2739                           
  2740                           ;setting_hardaware/uart.c: 53:         UART_Write(text[i]);
  2741   0007D8  502E               	movf	UART_Write_Text@text^0,w,c
  2742   0007DA  2430               	addwf	UART_Write_Text@i^0,w,c
  2743   0007DC  6E2F               	movwf	??_UART_Write_Text^0,c
  2744   0007DE  C02F  FFF6         	movff	??_UART_Write_Text,tblptrl
  2745   0007E2                     	if	1	;There is more than 1 active tblptr byte
  2746   0007E2  0E06               	movlw	high __smallconst
  2747   0007E4  6EF7               	movwf	tblptrh,c
  2748   0007E6                     	endif
  2749   0007E6                     	if	0	;tblptru may be non-zero
  2750   0007E6                     	endif
  2751   0007E6                     	if	0	;tblptru may be non-zero
  2752   0007E6                     	endif
  2753   0007E6  0008               	tblrd		*
  2754   0007E8  50F5               	movf	tablat,w,c
  2755   0007EA  EC7B  F004         	call	_UART_Write
  2756   0007EE  4A30               	infsnz	UART_Write_Text@i^0,f,c
  2757   0007F0  2A31               	incf	(UART_Write_Text@i+1)^0,f,c
  2758   0007F2                     i1l1216:
  2759   0007F2  502E               	movf	UART_Write_Text@text^0,w,c
  2760   0007F4  2430               	addwf	UART_Write_Text@i^0,w,c
  2761   0007F6  6E2F               	movwf	??_UART_Write_Text^0,c
  2762   0007F8  C02F  FFF6         	movff	??_UART_Write_Text,tblptrl
  2763   0007FC                     	if	1	;There is more than 1 active tblptr byte
  2764   0007FC  0E06               	movlw	high __smallconst
  2765   0007FE  6EF7               	movwf	tblptrh,c
  2766   000800                     	endif
  2767   000800                     	if	0	;tblptru may be non-zero
  2768   000800                     	endif
  2769   000800                     	if	0	;tblptru may be non-zero
  2770   000800                     	endif
  2771   000800  0008               	tblrd		*
  2772   000802  50F5               	movf	tablat,w,c
  2773   000804  0900               	iorlw	0
  2774   000806  A4D8               	btfss	status,2,c
  2775   000808  EF08  F004         	goto	i1u43_21
  2776   00080C  EF0A  F004         	goto	i1u43_20
  2777   000810                     i1u43_21:
  2778   000810  EFEC  F003         	goto	i1l1212
  2779   000814                     i1u43_20:
  2780   000814  0012               	return		;funcret
  2781   000816                     __end_of_UART_Write_Text:
  2782                           	callstack 0
  2783                           
  2784 ;; *************** function _UART_Write *****************
  2785 ;; Defined at:
  2786 ;;		line 44 in file "setting_hardaware/uart.c"
  2787 ;; Parameters:    Size  Location     Type
  2788 ;;  data            1    wreg     unsigned char 
  2789 ;; Auto vars:     Size  Location     Type
  2790 ;;  data            1    0[COMRAM] unsigned char 
  2791 ;; Return value:  Size  Location     Type
  2792 ;;                  1    wreg      void 
  2793 ;; Registers used:
  2794 ;;		wreg
  2795 ;; Tracked objects:
  2796 ;;		On entry : 0/0
  2797 ;;		On exit  : 0/0
  2798 ;;		Unchanged: 0/0
  2799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2800 ;;      Params:         0       0       0       0       0       0       0
  2801 ;;      Locals:         1       0       0       0       0       0       0
  2802 ;;      Temps:          0       0       0       0       0       0       0
  2803 ;;      Totals:         1       0       0       0       0       0       0
  2804 ;;Total ram usage:        1 bytes
  2805 ;; Hardware stack levels used: 1
  2806 ;; Hardware stack levels required when called: 1
  2807 ;; This function calls:
  2808 ;;		Nothing
  2809 ;; This function is called by:
  2810 ;;		_UART_Write_Text
  2811 ;;		_MyusartRead
  2812 ;; This function uses a non-reentrant model
  2813 ;;
  2814                           
  2815                           	psect	text18
  2816   0008F6                     __ptext18:
  2817                           	callstack 0
  2818   0008F6                     _UART_Write:
  2819                           	callstack 24
  2820                           
  2821                           ;incstack = 0
  2822                           ;UART_Write@data stored from wreg
  2823   0008F6  6E2D               	movwf	UART_Write@data^0,c
  2824   0008F8                     i1l89:
  2825   0008F8  A2AC               	btfss	172,1,c	;volatile
  2826   0008FA  EF81  F004         	goto	i1u1_21
  2827   0008FE  EF83  F004         	goto	i1u1_20
  2828   000902                     i1u1_21:
  2829   000902  EF7C  F004         	goto	i1l89
  2830   000906                     i1u1_20:
  2831   000906                     
  2832                           ;setting_hardaware/uart.c: 47:     TXREG = data;
  2833   000906  C02D  FFAD         	movff	UART_Write@data,4013	;volatile
  2834   00090A  0012               	return		;funcret
  2835   00090C                     __end_of_UART_Write:
  2836                           	callstack 0
  2837                           
  2838 ;; *************** function _GetString *****************
  2839 ;; Defined at:
  2840 ;;		line 77 in file "setting_hardaware/uart.c"
  2841 ;; Parameters:    Size  Location     Type
  2842 ;;		None
  2843 ;; Auto vars:     Size  Location     Type
  2844 ;;		None
  2845 ;; Return value:  Size  Location     Type
  2846 ;;                  1    0[COMRAM] PTR unsigned char 
  2847 ;; Registers used:
  2848 ;;		wreg
  2849 ;; Tracked objects:
  2850 ;;		On entry : 0/0
  2851 ;;		On exit  : 0/0
  2852 ;;		Unchanged: 0/0
  2853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2854 ;;      Params:         2       0       0       0       0       0       0
  2855 ;;      Locals:         0       0       0       0       0       0       0
  2856 ;;      Temps:          0       0       0       0       0       0       0
  2857 ;;      Totals:         2       0       0       0       0       0       0
  2858 ;;Total ram usage:        2 bytes
  2859 ;; Hardware stack levels used: 1
  2860 ;; Hardware stack levels required when called: 1
  2861 ;; This function calls:
  2862 ;;		Nothing
  2863 ;; This function is called by:
  2864 ;;		_Lo_ISR
  2865 ;; This function uses a non-reentrant model
  2866 ;;
  2867                           
  2868                           	psect	text19
  2869   000992                     __ptext19:
  2870                           	callstack 0
  2871   000992                     _GetString:
  2872                           	callstack 26
  2873   000992                     
  2874                           ;setting_hardaware/uart.c: 78:     return mystring;
  2875   000992  0E19               	movlw	_mystring& (0+255)
  2876   000994  0012               	return		;funcret
  2877   000996                     __end_of_GetString:
  2878                           	callstack 0
  2879                           
  2880 ;; *************** function _ClearBuffer *****************
  2881 ;; Defined at:
  2882 ;;		line 56 in file "setting_hardaware/uart.c"
  2883 ;; Parameters:    Size  Location     Type
  2884 ;;		None
  2885 ;; Auto vars:     Size  Location     Type
  2886 ;;  i               2    0[COMRAM] int 
  2887 ;; Return value:  Size  Location     Type
  2888 ;;                  1    wreg      void 
  2889 ;; Registers used:
  2890 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2891 ;; Tracked objects:
  2892 ;;		On entry : 0/0
  2893 ;;		On exit  : 0/0
  2894 ;;		Unchanged: 0/0
  2895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2896 ;;      Params:         0       0       0       0       0       0       0
  2897 ;;      Locals:         2       0       0       0       0       0       0
  2898 ;;      Temps:          0       0       0       0       0       0       0
  2899 ;;      Totals:         2       0       0       0       0       0       0
  2900 ;;Total ram usage:        2 bytes
  2901 ;; Hardware stack levels used: 1
  2902 ;; Hardware stack levels required when called: 1
  2903 ;; This function calls:
  2904 ;;		Nothing
  2905 ;; This function is called by:
  2906 ;;		_Lo_ISR
  2907 ;; This function uses a non-reentrant model
  2908 ;;
  2909                           
  2910                           	psect	text20
  2911   000816                     __ptext20:
  2912                           	callstack 0
  2913   000816                     _ClearBuffer:
  2914                           	callstack 26
  2915   000816                     
  2916                           ;setting_hardaware/uart.c: 57:     for(int i = 0; i < 10 ; i++)
  2917   000816  0E00               	movlw	0
  2918   000818  6E2E               	movwf	(ClearBuffer@i+1)^0,c
  2919   00081A  0E00               	movlw	0
  2920   00081C  6E2D               	movwf	ClearBuffer@i^0,c
  2921   00081E                     i1l952:
  2922                           
  2923                           ;setting_hardaware/uart.c: 58:         mystring[i] = '\0';
  2924   00081E  502D               	movf	ClearBuffer@i^0,w,c
  2925   000820  0F19               	addlw	low _mystring
  2926   000822  6ED9               	movwf	fsr2l,c
  2927   000824  6ADA               	clrf	fsr2h,c
  2928   000826  6ADF               	clrf	indf2,c
  2929   000828  4A2D               	infsnz	ClearBuffer@i^0,f,c
  2930   00082A  2A2E               	incf	(ClearBuffer@i+1)^0,f,c
  2931   00082C  BE2E               	btfsc	(ClearBuffer@i+1)^0,7,c
  2932   00082E  EF22  F004         	goto	i1u11_21
  2933   000832  502E               	movf	(ClearBuffer@i+1)^0,w,c
  2934   000834  E109               	bnz	i1u11_20
  2935   000836  0E0A               	movlw	10
  2936   000838  5C2D               	subwf	ClearBuffer@i^0,w,c
  2937   00083A  A0D8               	btfss	status,0,c
  2938   00083C  EF22  F004         	goto	i1u11_21
  2939   000840  EF24  F004         	goto	i1u11_20
  2940   000844                     i1u11_21:
  2941   000844  EF0F  F004         	goto	i1l952
  2942   000848                     i1u11_20:
  2943   000848                     
  2944                           ;setting_hardaware/uart.c: 59:     lenStr = 0;
  2945   000848  0E00               	movlw	0
  2946   00084A  6E18               	movwf	(_lenStr+1)^0,c
  2947   00084C  0E00               	movlw	0
  2948   00084E  6E17               	movwf	_lenStr^0,c
  2949   000850  0012               	return		;funcret
  2950   000852                     __end_of_ClearBuffer:
  2951                           	callstack 0
  2952                           
  2953 ;; *************** function _Hi_ISR *****************
  2954 ;; Defined at:
  2955 ;;		line 100 in file "main.c"
  2956 ;; Parameters:    Size  Location     Type
  2957 ;;		None
  2958 ;; Auto vars:     Size  Location     Type
  2959 ;;		None
  2960 ;; Return value:  Size  Location     Type
  2961 ;;                  1    wreg      void 
  2962 ;; Registers used:
  2963 ;;		None
  2964 ;; Tracked objects:
  2965 ;;		On entry : 0/0
  2966 ;;		On exit  : 0/0
  2967 ;;		Unchanged: 0/0
  2968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2969 ;;      Params:         0       0       0       0       0       0       0
  2970 ;;      Locals:         0       0       0       0       0       0       0
  2971 ;;      Temps:          0       0       0       0       0       0       0
  2972 ;;      Totals:         0       0       0       0       0       0       0
  2973 ;;Total ram usage:        0 bytes
  2974 ;; Hardware stack levels used: 1
  2975 ;; This function calls:
  2976 ;;		Nothing
  2977 ;; This function is called by:
  2978 ;;		Interrupt level 2
  2979 ;; This function uses a non-reentrant model
  2980 ;;
  2981                           
  2982                           	psect	intcode
  2983   000008                     __pintcode:
  2984                           	callstack 0
  2985   000008                     _Hi_ISR:
  2986                           	callstack 24
  2987                           
  2988                           ;incstack = 0
  2989   000008  8257               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  2990   00000A  EDC6  F004         	call	int_func,f	;refresh shadow registers
  2991                           
  2992                           	psect	intcode_body
  2993   00098C                     __pintcode_body:
  2994                           	callstack 24
  2995   00098C                     int_func:
  2996                           	callstack 24
  2997   00098C  0006               	pop		; remove dummy address from shadow register refresh
  2998   00098E  9257               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  2999   000990  0011               	retfie		f
  3000   000992                     __end_of_Hi_ISR:
  3001                           	callstack 0
  3002                           
  3003                           	psect	rparam
  3004   000001                     ___rparam_used  equ	1
  3005   000000                     ___param_bank   equ	0
  3006   000000                     __Lparam        equ	__Lrparam
  3007   000000                     __Hparam        equ	__Hrparam
  3008                           
  3009                           	psect	temp
  3010   000057                     btemp:
  3011                           	callstack 0
  3012   000057                     	ds	1
  3013   000057                     int$flags       set	btemp
  3014   000058                     wtemp8          set	btemp+1
  3015   000058                     ttemp5          set	btemp+1
  3016   00005B                     ttemp6          set	btemp+4
  3017   00005F                     ttemp7          set	btemp+8
  3018                           
  3019                           	psect	idloc
  3020                           
  3021                           ;Config register IDLOC0 @ 0x200000
  3022                           ;	unspecified, using default values
  3023   200000                     	org	2097152
  3024   200000  FF                 	db	255
  3025                           
  3026                           ;Config register IDLOC1 @ 0x200001
  3027                           ;	unspecified, using default values
  3028   200001                     	org	2097153
  3029   200001  FF                 	db	255
  3030                           
  3031                           ;Config register IDLOC2 @ 0x200002
  3032                           ;	unspecified, using default values
  3033   200002                     	org	2097154
  3034   200002  FF                 	db	255
  3035                           
  3036                           ;Config register IDLOC3 @ 0x200003
  3037                           ;	unspecified, using default values
  3038   200003                     	org	2097155
  3039   200003  FF                 	db	255
  3040                           
  3041                           ;Config register IDLOC4 @ 0x200004
  3042                           ;	unspecified, using default values
  3043   200004                     	org	2097156
  3044   200004  FF                 	db	255
  3045                           
  3046                           ;Config register IDLOC5 @ 0x200005
  3047                           ;	unspecified, using default values
  3048   200005                     	org	2097157
  3049   200005  FF                 	db	255
  3050                           
  3051                           ;Config register IDLOC6 @ 0x200006
  3052                           ;	unspecified, using default values
  3053   200006                     	org	2097158
  3054   200006  FF                 	db	255
  3055                           
  3056                           ;Config register IDLOC7 @ 0x200007
  3057                           ;	unspecified, using default values
  3058   200007                     	org	2097159
  3059   200007  FF                 	db	255
  3060                           
  3061                           	psect	config
  3062                           
  3063                           ; Padding undefined space
  3064   300000                     	org	3145728
  3065   300000  FF                 	db	255
  3066                           
  3067                           ;Config register CONFIG1H @ 0x300001
  3068                           ;	Oscillator Selection bits
  3069                           ;	OSC = INTIO67, Internal oscillator block, port function on RA6 and RA7
  3070                           ;	Fail-Safe Clock Monitor Enable bit
  3071                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  3072                           ;	Internal/External Oscillator Switchover bit
  3073                           ;	IESO = ON, Oscillator Switchover mode enabled
  3074   300001                     	org	3145729
  3075   300001  88                 	db	136
  3076                           
  3077                           ;Config register CONFIG2L @ 0x300002
  3078                           ;	Power-up Timer Enable bit
  3079                           ;	PWRT = OFF, PWRT disabled
  3080                           ;	Brown-out Reset Enable bits
  3081                           ;	BOREN = SBORDIS, Brown-out Reset enabled in hardware only (SBOREN is disabled)
  3082                           ;	Brown Out Reset Voltage bits
  3083                           ;	BORV = 3, Minimum setting
  3084   300002                     	org	3145730
  3085   300002  1F                 	db	31
  3086                           
  3087                           ;Config register CONFIG2H @ 0x300003
  3088                           ;	Watchdog Timer Enable bit
  3089                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  3090                           ;	Watchdog Timer Postscale Select bits
  3091                           ;	WDTPS = 1, 1:1
  3092   300003                     	org	3145731
  3093   300003  00                 	db	0
  3094                           
  3095                           ; Padding undefined space
  3096   300004                     	org	3145732
  3097   300004  FF                 	db	255
  3098                           
  3099                           ;Config register CONFIG3H @ 0x300005
  3100                           ;	CCP2 MUX bit
  3101                           ;	CCP2MX = PORTC, CCP2 input/output is multiplexed with RC1
  3102                           ;	PORTB A/D Enable bit
  3103                           ;	PBADEN = ON, PORTB<4:0> pins are configured as analog input channels on Reset
  3104                           ;	Low-Power Timer1 Oscillator Enable bit
  3105                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  3106                           ;	MCLR Pin Enable bit
  3107                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  3108   300005                     	org	3145733
  3109   300005  83                 	db	131
  3110                           
  3111                           ;Config register CONFIG4L @ 0x300006
  3112                           ;	Stack Full/Underflow Reset Enable bit
  3113                           ;	STVREN = ON, Stack full/underflow will cause Reset
  3114                           ;	Single-Supply ICSP Enable bit
  3115                           ;	LVP = OFF, Single-Supply ICSP disabled
  3116                           ;	Extended Instruction Set Enable bit
  3117                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  3118                           ;	Background Debugger Enable bit
  3119                           ;	DEBUG = 0x1, unprogrammed default
  3120   300006                     	org	3145734
  3121   300006  81                 	db	129
  3122                           
  3123                           ; Padding undefined space
  3124   300007                     	org	3145735
  3125   300007  FF                 	db	255
  3126                           
  3127                           ;Config register CONFIG5L @ 0x300008
  3128                           ;	Code Protection bit
  3129                           ;	CP0 = OFF, Block 0 (000800-001FFFh) not code-protected
  3130                           ;	Code Protection bit
  3131                           ;	CP1 = OFF, Block 1 (002000-003FFFh) not code-protected
  3132                           ;	Code Protection bit
  3133                           ;	CP2 = OFF, Block 2 (004000-005FFFh) not code-protected
  3134                           ;	Code Protection bit
  3135                           ;	CP3 = OFF, Block 3 (006000-007FFFh) not code-protected
  3136   300008                     	org	3145736
  3137   300008  0F                 	db	15
  3138                           
  3139                           ;Config register CONFIG5H @ 0x300009
  3140                           ;	Boot Block Code Protection bit
  3141                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
  3142                           ;	Data EEPROM Code Protection bit
  3143                           ;	CPD = OFF, Data EEPROM not code-protected
  3144   300009                     	org	3145737
  3145   300009  C0                 	db	192
  3146                           
  3147                           ;Config register CONFIG6L @ 0x30000A
  3148                           ;	Write Protection bit
  3149                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) not write-protected
  3150                           ;	Write Protection bit
  3151                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) not write-protected
  3152                           ;	Write Protection bit
  3153                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) not write-protected
  3154                           ;	Write Protection bit
  3155                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) not write-protected
  3156   30000A                     	org	3145738
  3157   30000A  0F                 	db	15
  3158                           
  3159                           ;Config register CONFIG6H @ 0x30000B
  3160                           ;	Configuration Register Write Protection bit
  3161                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  3162                           ;	Boot Block Write Protection bit
  3163                           ;	WRTB = OFF, Boot block (000000-0007FFh) not write-protected
  3164                           ;	Data EEPROM Write Protection bit
  3165                           ;	WRTD = OFF, Data EEPROM not write-protected
  3166   30000B                     	org	3145739
  3167   30000B  E0                 	db	224
  3168                           
  3169                           ;Config register CONFIG7L @ 0x30000C
  3170                           ;	Table Read Protection bit
  3171                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) not protected from table reads executed in other
      +                           blocks
  3172                           ;	Table Read Protection bit
  3173                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) not protected from table reads executed in other
      +                           blocks
  3174                           ;	Table Read Protection bit
  3175                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) not protected from table reads executed in other
      +                           blocks
  3176                           ;	Table Read Protection bit
  3177                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) not protected from table reads executed in other
      +                           blocks
  3178   30000C                     	org	3145740
  3179   30000C  0F                 	db	15
  3180                           
  3181                           ;Config register CONFIG7H @ 0x30000D
  3182                           ;	Boot Block Table Read Protection bit
  3183                           ;	EBTRB = OFF, Boot block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
  3184   30000D                     	org	3145741
  3185   30000D  40                 	db	64
  3186                           tosu	equ	0xFFF
  3187                           tosh	equ	0xFFE
  3188                           tosl	equ	0xFFD
  3189                           stkptr	equ	0xFFC
  3190                           pclatu	equ	0xFFB
  3191                           pclath	equ	0xFFA
  3192                           pcl	equ	0xFF9
  3193                           tblptru	equ	0xFF8
  3194                           tblptrh	equ	0xFF7
  3195                           tblptrl	equ	0xFF6
  3196                           tablat	equ	0xFF5
  3197                           prodh	equ	0xFF4
  3198                           prodl	equ	0xFF3
  3199                           indf0	equ	0xFEF
  3200                           postinc0	equ	0xFEE
  3201                           postdec0	equ	0xFED
  3202                           preinc0	equ	0xFEC
  3203                           plusw0	equ	0xFEB
  3204                           fsr0h	equ	0xFEA
  3205                           fsr0l	equ	0xFE9
  3206                           wreg	equ	0xFE8
  3207                           indf1	equ	0xFE7
  3208                           postinc1	equ	0xFE6
  3209                           postdec1	equ	0xFE5
  3210                           preinc1	equ	0xFE4
  3211                           plusw1	equ	0xFE3
  3212                           fsr1h	equ	0xFE2
  3213                           fsr1l	equ	0xFE1
  3214                           bsr	equ	0xFE0
  3215                           indf2	equ	0xFDF
  3216                           postinc2	equ	0xFDE
  3217                           postdec2	equ	0xFDD
  3218                           preinc2	equ	0xFDC
  3219                           plusw2	equ	0xFDB
  3220                           fsr2h	equ	0xFDA
  3221                           fsr2l	equ	0xFD9
  3222                           status	equ	0xFD8

Data Sizes:
    Strings     3
    Constant    0
    Data        0
    BSS         44
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     42      86
    BANK0           128      5       5
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    sp__GetString	PTR unsigned char  size(1) Largest target is 20
		 -> mystring(COMRAM[20]), 

    sp__strcpy	PTR unsigned char  size(1) Largest target is 20
		 -> Lo_ISR@command(COMRAM[20]), 

    strcpy@d	PTR unsigned char  size(1) Largest target is 20
		 -> Lo_ISR@command(COMRAM[20]), 

    strcpy@dest	PTR unsigned char  size(1) Largest target is 20
		 -> Lo_ISR@command(COMRAM[20]), 

    strcpy@src	PTR const unsigned char  size(2) Largest target is 20
		 -> mystring(COMRAM[20]), STR_2(CODE[1]), STR_3(CODE[1]), STR_4(CODE[1]), 
		 -> STR_5(CODE[1]), STR_6(CODE[1]), STR_7(CODE[1]), 

    strlen@a	PTR const unsigned char  size(1) Largest target is 20
		 -> Lo_ISR@command(COMRAM[20]), 

    strlen@s	PTR const unsigned char  size(1) Largest target is 20
		 -> Lo_ISR@command(COMRAM[20]), 

    UART_Write_Text@text	PTR unsigned char  size(1) Largest target is 3
		 -> STR_1(CODE[3]), 


Critical Paths under _main in COMRAM

    _ledRightOn->_displayBinary
    _ledRightOff->_displayBinary
    _ledLeftOn->_displayBinary
    _ledLeftOff->_displayBinary
    _initialState->_displayBinary
    _BreakOn->_displayBinary
    _BreakOff->_displayBinary

Critical Paths under _Lo_ISR in COMRAM

    _Lo_ISR->_strcpy
    _strcpy->_GetString
    _MyusartRead->_UART_Write_Text
    _UART_Write_Text->_UART_Write

Critical Paths under _Hi_ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_BreakOff
    _main->_BreakOn
    _main->_ledLeftOff
    _main->_ledLeftOn
    _main->_ledRightOff
    _main->_ledRightOn
    _ledRightOn->_displayBinary
    _ledRightOff->_displayBinary
    _ledLeftOn->_displayBinary
    _ledLeftOff->_displayBinary
    _initialState->_displayBinary
    _BreakOn->_displayBinary
    _BreakOff->_displayBinary

Critical Paths under _Lo_ISR in BANK0

    None.

Critical Paths under _Hi_ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Lo_ISR in BANK1

    None.

Critical Paths under _Hi_ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Lo_ISR in BANK2

    None.

Critical Paths under _Hi_ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Lo_ISR in BANK3

    None.

Critical Paths under _Hi_ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _Lo_ISR in BANK4

    None.

Critical Paths under _Hi_ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _Lo_ISR in BANK5

    None.

Critical Paths under _Hi_ISR in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    1219
                                              3 BANK0      2     2      0
                           _BreakOff
                            _BreakOn
                  _SYSTEM_Initialize
                       _initialState
                         _ledLeftOff
                          _ledLeftOn
                        _ledRightOff
                         _ledRightOn
 ---------------------------------------------------------------------------------
 (1) _ledRightOn                                           2     0      2     179
                                              1 BANK0      2     0      2
                      _displayBinary
 ---------------------------------------------------------------------------------
 (1) _ledRightOff                                          2     0      2     179
                                              1 BANK0      2     0      2
                      _displayBinary
 ---------------------------------------------------------------------------------
 (1) _ledLeftOn                                            2     0      2     179
                                              1 BANK0      2     0      2
                      _displayBinary
 ---------------------------------------------------------------------------------
 (1) _ledLeftOff                                           2     0      2     179
                                              1 BANK0      2     0      2
                      _displayBinary
 ---------------------------------------------------------------------------------
 (1) _initialState                                         0     0      0     145
                      _displayBinary
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
                    _UART_Initialize
 ---------------------------------------------------------------------------------
 (2) _UART_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _BreakOn                                              2     0      2     179
                                              1 BANK0      2     0      2
                      _displayBinary
 ---------------------------------------------------------------------------------
 (1) _BreakOff                                             2     0      2     179
                                              1 BANK0      2     0      2
                      _displayBinary
 ---------------------------------------------------------------------------------
 (2) _displayBinary                                        3     1      2     145
                                             40 COMRAM     2     0      2
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _Lo_ISR                                              32    32      0    1067
                                              8 COMRAM    32    32      0
                        _ClearBuffer
                          _GetString
                        _MyusartRead
                             _strcpy
                             _strlen
 ---------------------------------------------------------------------------------
 (4) _strlen                                               3     1      2      96
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (4) _strcpy                                               6     3      3      87
                                              2 COMRAM     6     3      3
                          _GetString (ARG)
 ---------------------------------------------------------------------------------
 (4) _MyusartRead                                          1     1      0     188
                                              5 COMRAM     1     1      0
                         _UART_Write
                    _UART_Write_Text
 ---------------------------------------------------------------------------------
 (5) _UART_Write_Text                                      4     3      1     106
                                              1 COMRAM     4     3      1
                         _UART_Write
 ---------------------------------------------------------------------------------
 (6) _UART_Write                                           1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _GetString                                            2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (4) _ClearBuffer                                          2     2      0      45
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _Hi_ISR                                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _BreakOff
     _displayBinary
   _BreakOn
     _displayBinary
   _SYSTEM_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _UART_Initialize
   _initialState
     _displayBinary
   _ledLeftOff
     _displayBinary
   _ledLeftOn
     _displayBinary
   _ledRightOff
     _displayBinary
   _ledRightOn
     _displayBinary

 _Lo_ISR (ROOT)
   _ClearBuffer
   _GetString
   _MyusartRead
     _UART_Write
     _UART_Write_Text
       _UART_Write
   _strcpy
     _GetString (ARG)
   _strlen

 _Hi_ISR (ROOT)

Address spaces:
Name               Size   Autos  Total    Usage
BIGRAM            1535      0       0      0.0%
BITBANK5           256      0       0      0.0%
BANK5              256      0       0      0.0%
BITBANK4           256      0       0      0.0%
BANK4              256      0       0      0.0%
BITBANK3           256      0       0      0.0%
BANK3              256      0       0      0.0%
BITBANK2           256      0       0      0.0%
BANK2              256      0       0      0.0%
BITBANK1           256      0       0      0.0%
BANK1              256      0       0      0.0%
BITBANK0           128      0       0      0.0%
BANK0              128      5       5      3.9%
BITCOMRAM          126      0       0      0.0%
COMRAM             126     42      86     68.3%
BITBIGSFRh          82      0       0      0.0%
BITBIGSFRlh         35      0       0      0.0%
BITBIGSFRll          9      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0      91      0.0%


Microchip Technology PIC18 Macro Assembler V2.50 build 20240725155939 
Symbol Table                                                                                   Sun Jan 12 10:43:03 2025

                           l41 098A                             l56 095E                             l59 0982  
                           l86 08DA                             bsr 0FE0                            l152 0950  
                          l161 0934                            l170 097A                            l155 0918  
                          l164 0942                            l149 077E                            l158 0926  
                          l167 096C                            l176 0694                            l910 08BA  
                          l920 08CE                            l912 08C4                            l906 0984  
                          l930 08D8                            l922 08D0                            l914 08C8  
                          l908 097C                            l924 08D2                            l916 08CA  
                          l926 08D4                            l918 08CC                            l942 0952  
                          l928 08D6                            l944 095A                            u820 0702  
                          u821 06F8                            u840 0724                            u841 071C  
                          u860 0748                            u861 0740                            u838 0706  
                          u880 076E                            u881 0766                            u858 0728  
                          u878 074C                            u898 0772                            _str 0001  
               ?_displayBinary 0055                            wreg 0FE8                           l1500 0684  
                         l1504 0694                           l1442 06EE                           l1450 0928  
                         l1444 0944                           l1452 0936                           l1460 060A  
                         l1454 0960                           l1446 090C                           l1542 06AC  
                         l1470 0614                           l1462 060C                           l1456 096E  
                         l1448 091A                           l1480 061E                           l1472 0616  
                         l1464 060E                           l1490 0634                           l1482 0620  
                         l1474 0618                           l1466 0610                           l1458 0606  
                         l1492 0644                           l1484 0622                           l1476 061A  
                         l1468 0612                           l1494 0654                           l1486 0624  
                         l1478 061C                           l1496 0664                           l1488 062C  
                         l1498 0674                           _ADFM 7E07                           STR_1 0601  
                         STR_2 0603                           STR_3 0603                           STR_4 0603  
                         STR_5 0603                           STR_6 0603                           STR_7 0603  
                         _CREN 7D5C                           _LATA 0F89                           _RCIF 7CF5  
                         i1l92 090A                           i1l89 08F8                           i1l98 0814  
                         _main 0606                           fsr1h 0FE2                           fsr2h 0FDA  
                         indf1 0FE7                           indf2 0FDF                           fsr1l 0FE1  
                         fsr2l 0FD9                           btemp 0057                           start 0378  
              __end_of_BreakOn 096E                   ___param_bank 0000        __end_of_UART_Write_Text 0816  
             ?_UART_Initialize 002D  __end_of_OSCILLATOR_Initialize 0984                          ?_main 002D  
                        _IRCF0 7E9C                          _IRCF1 7E9D                          _IRCF2 7E9E  
                        i1l110 0994                          i1l103 0850                          i1l107 088A  
                        i1l204 0348                          i1l209 0348                          i1l900 08B8  
                        i1l902 08F8                          i1l904 0906                          i2l193 098E  
                        i1l952 081E                          i1l954 0828                          i1l946 0816  
                        i1l956 082C                          i1l958 0848                          i1l894 07CA  
                        _RCREG 0FAE                          _SPBRG 0FAF                          _TRISA 0F92  
                        _TXREG 0FAD                    ?_UART_Write 002D                          _state 0015  
                  _ClearBuffer 0816                          tablat 0FF5                          ttemp5 0058  
                        ttemp6 005B                          ttemp7 005F                          status 0FD8  
                        wtemp8 0058               __end_of_BreakOff 097C                __initialization 08DC  
                 __end_of_main 06EE                         ??_main 0083                ??_displayBinary 0080  
                __activetblptr 0002                         _ADCON1 0FC1                         _ADRESH 0FC4  
                       _ADRESL 0FC3                         i1l1210 07CC                         i1l1212 07D8  
                       i1l1220 0852                         i1l1214 07EE                         i1l1230 0880  
                       i1l1222 0856                         i1l1216 07F2                         i1l1232 0884  
                       i1l1224 0868                         i1l1400 0264                         i1l1320 0046  
                       i1l1410 0292                         i1l1402 0268                         i1l1330 007E  
                       i1l1322 0054                         i1l1236 0992                         i1l1228 0874  
                       i1l1260 0894                         i1l1412 02A4                         i1l1340 00CC  
                       i1l1332 0090                         i1l1324 0062                         i1l1254 0780  
                       i1l1262 0896                         i1l1430 0324                         i1l1414 02C0  
                       i1l1342 00DE                         i1l1334 00A4                         i1l1326 0068  
                       i1l1256 0784                         i1l1264 08AC                         i1l1432 032C  
                       i1l1416 02C8                         i1l1424 02E4                         i1l1408 0280  
                       i1l1360 0154                         i1l1344 00FA                         i1l1336 00A8  
                       i1l1328 006C                         i1l1258 088C                         i1l1434 0330  
                       i1l1426 02F6                         i1l1418 02CC                         i1l1362 0170  
                       i1l1346 0102                         i1l1338 00BA                         i1l1354 011E  
                       i1l1428 0308                         i1l1380 01E6                         i1l1364 0178  
                       i1l1356 0130                         i1l1372 0194                         i1l1348 0106  
                       i1l1382 01EE                         i1l1374 01A6                         i1l1390 020A  
                       i1l1366 017C                         i1l1358 0142                         i1l1392 021C  
                       i1l1384 01F2                         i1l1376 01B8                         i1l1394 022E  
                       i1l1378 01CA                         i1l1396 0240                         i1l1398 025C  
                    ??_BreakOn 0057                         i1u1_20 0906                         i1u1_21 0902  
                       _Hi_ISR 0008                  ?_initialState 002D                         _Lo_ISR 0018  
             ?_UART_Write_Text 002E                         _lenStr 0017                         clear_0 08E2  
                       isa$std 0001                         _strcpy 0780                         _strlen 088C  
                 __mediumconst 0000                         tblptrh 0FF7                         tblptrl 0FF6  
                       tblptru 0FF8              _SYSTEM_Initialize 0952                     __accesstop 0080  
      __end_of__initialization 08E8                 ??_initialState 0057             ?_SYSTEM_Initialize 002D  
                ___rparam_used 0001              __end_of_GetString 0996                 __pcstackCOMRAM 002D  
          ??_SYSTEM_Initialize 0055                  ??_MyusartRead 0032                      ?_BreakOff 0081  
    __end_of_SYSTEM_Initialize 0960                        ?_Hi_ISR 002D                        ?_Lo_ISR 002D  
                      _CCP1CON 0FBD                     _ledLeftOff 0936                        ?_strcpy 002F  
                      ?_strlen 002D                     _ledRightOn 090C                        i1u11_20 0848  
                      i1u11_21 0844                   ??_UART_Write 002D                        i1u43_20 0814  
                      i1u43_21 0810                        i1u52_20 0868                        i1u60_20 00BA  
                      i1u52_21 0864                        i1u60_21 00B6                        i1u53_20 07B8  
                      i1u61_20 00CC                        i1u61_21 00C8                     ??_BreakOff 0057  
                      i1u53_27 07AE                        i1u54_20 07CA                        i1u70_20 01CA  
                      i1u62_20 00DE                        i1u54_21 07C6                        i1u70_21 01C6  
                      i1u62_21 00DA                        i1u55_20 08AC                        i1u71_20 01E6  
                      i1u63_20 00FA                        i1u55_21 08A8                        i1u71_21 01E2  
                      i1u63_21 00F6                        i1u80_20 0308                        i1u72_20 021C  
                      i1u64_20 0130                        i1u56_20 0054                        i1u80_21 0304  
                      i1u72_21 0218                        i1u64_21 012C                        i1u56_21 0050  
                      i1u81_20 0324                        i1u73_20 022E                        i1u65_20 0142  
                      i1u57_20 0062                        i1u81_21 0320                        i1u73_21 022A  
                      i1u65_21 013E                        i1u57_21 005E                        i1u74_20 0240  
                      i1u66_20 0154                        i1u58_20 007E                        i1u74_21 023C  
                      i1u66_21 0150                        i1u58_21 007A                        i1u75_20 025C  
                      i1u67_20 0170                        i1u59_20 0090                        i1u75_21 0258  
                      i1u67_21 016C                        i1u59_21 008C                        i1u76_20 0292  
                      i1u68_20 01A6                        i1u76_21 028E                        i1u68_21 01A2  
                      i1u77_20 02A4                        i1u69_20 01B8                        i1u77_21 02A0  
                      i1u69_21 01B4                        i1u78_20 02C0                        i1u78_21 02BC  
                      i1u79_20 02F6                        i1u79_21 02F2                   ?_ClearBuffer 002D  
          __end_of_MyusartRead 088C                        _BreakOn 0960              __end_of_ledLeftOn 0936  
                      __Hparam 0000                        __Lparam 0000             __end_of_UART_Write 090C  
                 __psmallconst 0600                        __pcinit 08DC                        __ramtop 0600  
                      __ptext0 0606                        __ptext1 090C                        __ptext2 091A  
                      __ptext3 0928                        __ptext4 0936                        __ptext5 0944  
                      __ptext6 0952                        __ptext7 08BA                        __ptext8 097C  
                      __ptext9 0984          _OSCILLATOR_Initialize 097C           __end_of_initialState 0952  
               __pintcode_body 098C           end_of_initialization 08E8                  __Lmediumconst 0000  
                      int_func 098C                      _RCSTAbits 0FAB                        postinc0 0FEE  
                      strcpy@d 0034                        strlen@a 002F                        strlen@s 002D  
                  ?_ledLeftOff 0081                 UART_Write@data 002D                    ?_ledRightOn 0081  
        __end_of_displayBinary 0780                      _TRISAbits 0F92                      _TRISCbits 0F94  
                  _MyusartRead 0852                  ??_ledRightOff 0057                      _TXSTAbits 0FAC  
               __end_of_Hi_ISR 0992                 __end_of_Lo_ISR 0378   __end_of_INTERRUPT_Initialize 098C  
                    _GetString 0992                    _BAUDCONbits 0FB8         ?_OSCILLATOR_Initialize 002D  
               __end_of_strcpy 07CC                 __end_of_strlen 08BA            start_initialization 08DC  
                 ClearBuffer@i 002D              ??_UART_Initialize 0055                       ??_Hi_ISR 002D  
                     ??_Lo_ISR 0035            __end_of_ledRightOff 0928                     ?_GetString 002D  
                     ??_strcpy 0032                       ??_strlen 002F               displayBinary@num 0055  
                  __pbssCOMRAM 0001                  __pcstackBANK0 0080                       ?_BreakOn 0081  
                 _initialState 0944                  Lo_ISR@command 0041                      __pintcode 0008  
                    _ledLeftOn 0928                    __pintcodelo 0018                    __smallconst 0600  
            ??_UART_Write_Text 002F           _INTERRUPT_Initialize 0984                    _ledRightOff 091A  
                     _LATAbits 0F89                       _IPR1bits 0F9F                       _PIE1bits 0F9D  
                     _PIR1bits 0F9E                       _RCONbits 0FD0                     ?_ledLeftOn 0081  
                  ??_GetString 002F                   ??_ledLeftOff 0057                     _ADCON0bits 0FC2  
                   _ADCON2bits 0FC0                   ??_ledRightOn 0057        MyusartRead@receivedData 0032  
                 ?_MyusartRead 002D                       _BreakOff 096E          ?_INTERRUPT_Initialize 002D  
           __end_of_ledLeftOff 0944                       __Hrparam 0000             __end_of_ledRightOn 091A  
                     __Lrparam 0000        ??_OSCILLATOR_Initialize 0055                _UART_Initialize 08BA  
                     __ptext10 0960                       __ptext11 096E                       __ptext20 0816  
                     __ptext12 06EE                       __ptext14 088C                       __ptext15 0780  
                     __ptext16 0852                       __ptext17 07CC                       __ptext18 08F6  
                     __ptext19 0992                    BreakOff@num 0081                     strcpy@dest 002F  
          UART_Write_Text@text 002E                  ledLeftOff@num 0081                       isa$xinst 0000  
                     int$flags 0057                    ??_ledLeftOn 0057                       _mystring 0019  
                   _INTCONbits 0FF2         ??_INTERRUPT_Initialize 0055                  ??_ClearBuffer 002D  
                     intlevel1 0000                       intlevel2 0000                     BreakOn@num 0081  
                    strcpy@src 0030                   ledLeftOn@num 0081        __end_of_UART_Initialize 08DC  
              _UART_Write_Text 07CC                  _displayBinary 06EE                     _UART_Write 08F6  
             UART_Write_Text@i 0030                   ?_ledRightOff 0081            __end_of_ClearBuffer 0852  
               ledRightOff@num 0081                  ledRightOn@num 0081  
